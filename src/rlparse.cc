/* Automatically generated by Kelbt from "rlparse.kl".
 *
 * Parts of this file are copied from Kelbt source covered by the GNU
 * GPL. As a special exception, you may use the parts of this file copied
 * from Kelbt source without restriction. The remainder is derived from
 * "rlparse.kl" and inherits the copyright status of that file.
 */

#line 1 "rlparse.kl"
/*
 *  Copyright 2001-2016 Adrian Thurston <thurston@complang.org>
 */

/*  This file is part of Ragel.
 *
 *  Ragel is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 *  Ragel is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with Ragel; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 */

#include "rlparse.h"
#include "ragel.h"
#include "inputdata.h"
#include <iostream>
#include <errno.h>
#include <stdlib.h>

using std::endl;

Parser6::Parser6( InputData *id, const char *fileName, char *sectionName,
		const InputLoc &sectionLoc, const HostLang *hostLang,
		MinimizeLevel minimizeLevel,
		MinimizeOpt minimizeOpt )
:
	sectionName(sectionName),
	hostLang(hostLang),
	tokHead(0),
	parseSubstitutions(false)
{
	pd = new ParseData( id, std::string(sectionName),
			id->nextMachineId++, sectionLoc, hostLang, minimizeLevel, minimizeOpt );
	exportContext.append( false );

	pd->includeHistory.append( IncludeHistoryItem( fileName, sectionName ) );
}

#line 102 "rlparse.kh"
#line 105 "rlparse.kh"
#line 144 "rlparse.kh"
#line 1847 "rlparse.kl"


#line 64 "rlparse.cc"
struct Parser6_Lel_action_arg_list
{
#line 956 "rlparse.kl"

	ActionArgList *argList;


#line 70 "rlparse.cc"
};

struct Parser6_Lel_action_param
{
#line 271 "rlparse.kl"

	ActionParam *param;


#line 80 "rlparse.cc"
};

struct Parser6_Lel_action_param_list
{
#line 295 "rlparse.kl"

	ActionParamList *paramList;


#line 90 "rlparse.cc"
};

struct Parser6_Lel_action_ref
{
#line 945 "rlparse.kl"

	Action *action;


#line 100 "rlparse.cc"
};

struct Parser6_Lel_alphabet_num
{
#line 1422 "rlparse.kl"

	bool neg;
	Token token;


#line 111 "rlparse.cc"
};

struct Parser6_Lel_aug_type
{
#line 736 "rlparse.kl"

	ParserLoc loc;
	AugType augType;


#line 122 "rlparse.cc"
};

struct Parser6_Lel_colon_cond
{
#line 1342 "rlparse.kl"

	Factor::Type type;
	ParserLoc loc;


#line 133 "rlparse.cc"
};

struct Parser6_Lel_expression
{
#line 528 "rlparse.kl"

	Expression *expression;


#line 143 "rlparse.cc"
};

struct Parser6_Lel_factor
{
#line 1267 "rlparse.kl"

	Factor *factor;


#line 153 "rlparse.cc"
};

struct Parser6_Lel_factor_rep_num
{
#line 1221 "rlparse.kl"

	int rep;


#line 163 "rlparse.cc"
};

struct Parser6_Lel_factor_with_aug
{
#line 642 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 173 "rlparse.cc"
};

struct Parser6_Lel_factor_with_ep
{
#line 626 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 183 "rlparse.cc"
};

struct Parser6_Lel_factor_with_label
{
#line 610 "rlparse.kl"

	FactorWithAug *factorWithAug;


#line 193 "rlparse.cc"
};

struct Parser6_Lel_factor_with_neg
{
#line 1231 "rlparse.kl"

	FactorWithNeg *factorWithNeg;


#line 203 "rlparse.cc"
};

struct Parser6_Lel_factor_with_rep
{
#line 1160 "rlparse.kl"

	FactorWithRep *factorWithRep;


#line 213 "rlparse.cc"
};

struct Parser6_Lel_inline_item
{
#line 1602 "rlparse.kl"

	InlineItem *inlineItem;


#line 223 "rlparse.cc"
};

struct Parser6_Lel_inline_list
{
#line 1581 "rlparse.kl"

	InlineList *inlineList;


#line 233 "rlparse.cc"
};

struct Parser6_Lel_join
{
#line 511 "rlparse.kl"

	Join *join;


#line 243 "rlparse.cc"
};

struct Parser6_Lel_join_or_lm
{
#line 412 "rlparse.kl"

	MachineDef *machineDef;


#line 253 "rlparse.cc"
};

struct Parser6_Lel_lm_part_list
{
#line 436 "rlparse.kl"

	LmPartList *lmPartList;


#line 263 "rlparse.cc"
};

struct Parser6_Lel_local_err_name
{
#line 1148 "rlparse.kl"

	int error_name;


#line 273 "rlparse.cc"
};

struct Parser6_Lel_longest_match_part
{
#line 460 "rlparse.kl"

	LongestMatchPart *lmPart;


#line 283 "rlparse.cc"
};

struct Parser6_Lel_nfa_expr
{
#line 233 "rlparse.kl"

	NfaUnion *nfaUnion;


#line 293 "rlparse.cc"
};

struct Parser6_Lel_nfa_round_list
{
#line 193 "rlparse.kl"

	NfaRoundVect *roundsList;


#line 303 "rlparse.cc"
};

struct Parser6_Lel_nfa_round_spec
{
#line 173 "rlparse.kl"

	long depth;
	long grouping;


#line 314 "rlparse.cc"
};

struct Parser6_Lel_nfa_rounds
{
#line 220 "rlparse.kl"

	NfaRoundVect *roundsList;


#line 324 "rlparse.cc"
};

struct Parser6_Lel_opt_export
{
#line 135 "rlparse.kl"

	bool isSet;


#line 334 "rlparse.cc"
};

struct Parser6_Lel_opt_lm_part_action
{
#line 484 "rlparse.kl"

	Action *action;


#line 344 "rlparse.cc"
};

struct Parser6_Lel_opt_max_arg
{
#line 1370 "rlparse.kl"

	Action *action;


#line 354 "rlparse.cc"
};

struct Parser6_Lel_priority_aug
{
#line 1077 "rlparse.kl"

	int priorityNum;


#line 364 "rlparse.cc"
};

struct Parser6_Lel_priority_aug_num
{
#line 1094 "rlparse.kl"

	bool neg;
	bool pos;
	Token token;


#line 376 "rlparse.cc"
};

struct Parser6_Lel_priority_name
{
#line 1061 "rlparse.kl"

	int priorityName;


#line 386 "rlparse.cc"
};

struct Parser6_Lel_range_lit
{
#line 1403 "rlparse.kl"

	Literal *literal;


#line 396 "rlparse.cc"
};

struct Parser6_Lel_regular_expr
{
#line 1446 "rlparse.kl"

	RegExpr *regExpr;


#line 406 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_char
{
#line 1499 "rlparse.kl"

	ReItem *reItem;


#line 416 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_item
{
#line 1482 "rlparse.kl"

	ReItem *reItem;


#line 426 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_or_char
{
#line 1556 "rlparse.kl"

	ReOrItem *reOrItem;


#line 436 "rlparse.cc"
};

struct Parser6_Lel_regular_expr_or_data
{
#line 1523 "rlparse.kl"

	ReOrBlock *reOrBlock;


#line 446 "rlparse.cc"
};

struct Parser6_Lel_term
{
#line 579 "rlparse.kl"

	Term *term;


#line 456 "rlparse.cc"
};

struct Parser6_Lel_term_short
{
#line 558 "rlparse.kl"

	Term *term;


#line 466 "rlparse.cc"
};

struct Parser6_Lel_token_type
{
#line 264 "rlparse.kl"

	Token token;


#line 476 "rlparse.cc"
};

union Parser6_UserData
{
	struct Parser6_Lel_action_arg_list action_arg_list;
	struct Parser6_Lel_action_param action_param;
	struct Parser6_Lel_action_param_list action_param_list;
	struct Parser6_Lel_action_ref action_ref;
	struct Parser6_Lel_alphabet_num alphabet_num;
	struct Parser6_Lel_aug_type aug_type;
	struct Parser6_Lel_colon_cond colon_cond;
	struct Parser6_Lel_expression expression;
	struct Parser6_Lel_factor factor;
	struct Parser6_Lel_factor_rep_num factor_rep_num;
	struct Parser6_Lel_factor_with_aug factor_with_aug;
	struct Parser6_Lel_factor_with_ep factor_with_ep;
	struct Parser6_Lel_factor_with_label factor_with_label;
	struct Parser6_Lel_factor_with_neg factor_with_neg;
	struct Parser6_Lel_factor_with_rep factor_with_rep;
	struct Parser6_Lel_inline_item inline_item;
	struct Parser6_Lel_inline_list inline_list;
	struct Parser6_Lel_join join;
	struct Parser6_Lel_join_or_lm join_or_lm;
	struct Parser6_Lel_lm_part_list lm_part_list;
	struct Parser6_Lel_local_err_name local_err_name;
	struct Parser6_Lel_longest_match_part longest_match_part;
	struct Parser6_Lel_nfa_expr nfa_expr;
	struct Parser6_Lel_nfa_round_list nfa_round_list;
	struct Parser6_Lel_nfa_round_spec nfa_round_spec;
	struct Parser6_Lel_nfa_rounds nfa_rounds;
	struct Parser6_Lel_opt_export opt_export;
	struct Parser6_Lel_opt_lm_part_action opt_lm_part_action;
	struct Parser6_Lel_opt_max_arg opt_max_arg;
	struct Parser6_Lel_priority_aug priority_aug;
	struct Parser6_Lel_priority_aug_num priority_aug_num;
	struct Parser6_Lel_priority_name priority_name;
	struct Parser6_Lel_range_lit range_lit;
	struct Parser6_Lel_regular_expr regular_expr;
	struct Parser6_Lel_regular_expr_char regular_expr_char;
	struct Parser6_Lel_regular_expr_item regular_expr_item;
	struct Parser6_Lel_regular_expr_or_char regular_expr_or_char;
	struct Parser6_Lel_regular_expr_or_data regular_expr_or_data;
	struct Parser6_Lel_term term;
	struct Parser6_Lel_term_short term_short;
	struct Parser6_Lel_token_type token_type;
	struct Token token;
};

struct Parser6_LangEl
{
	char *file;
	int line;
	int type;
	int reduction;
	int state;
	int causeReduce;
	union Parser6_UserData user;
	unsigned int retry;
	struct Parser6_LangEl *next, *child, *prev;
};

struct Parser6_Block
{
	struct Parser6_LangEl data[8128];
	struct Parser6_Block *next;
};

#line 546 "rlparse.cc"
unsigned int Parser6_startState = 0;

short Parser6_indicies[] = {
	212, -1, 212, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 212, 212, 212, 212, -1, -1, 
	-1, -1, -1, -1, -1, -1, 212, 212, 
	212, 212, 212, 212, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	212, 212, -1, -1, -1, -1, 212, 1, 
	0, 498, 214, -1, 214, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 214, 214, 214, 214, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	214, 214, 214, 214, 214, 214, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 214, 214, -1, -1, -1, -1, 
	210, -1, -1, 2, 18, -1, 211, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 6, 
	7, 8, -1, -1, -1, -1, -1, -1, 
	-1, -1, 220, 12, 13, 16, 14, 15, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 10, 9, -1, -1, 
	-1, -1, -1, -1, -1, -1, 213, 481, 
	482, 483, 484, 485, 486, 487, 488, 489, 
	490, 491, 492, 493, 494, 495, -1, 11, 
	3, 4, 17, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 33, 
	34, 19, 20, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 410, 412, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 21, 
	453, 453, 453, -1, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	453, -1, -1, 453, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, 453, 453, 453, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	453, -1, -1, -1, 453, 453, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 24, 453, 453, 453, -1, 453, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, -1, -1, 453, 453, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 453, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 453, 453, 453, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, 453, -1, -1, -1, 453, 
	453, 453, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 31, 249, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	249, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 30, 32, -1, -1, -1, -1, 221, 
	25, 26, 28, 29, 27, 233, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 233, 233, 36, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 240, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 35, 243, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 37, 22, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 410, 412, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 38, 411, 465, 466, 467, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 245, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 463, -1, -1, 461, 462, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 468, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 457, 458, 459, 
	460, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 469, 470, -1, -1, -1, 471, 
	472, 39, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 454, -1, 
	456, -1, 452, 455, 426, 426, 426, -1, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 426, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 426, -1, -1, 426, -1, -1, 426, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 426, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 426, 426, 
	426, 426, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, -1, -1, 426, 426, 
	426, 426, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 40, 426, 
	426, 426, -1, 426, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 426, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 426, -1, -1, 426, 
	-1, -1, 426, 426, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 426, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 426, 426, 426, 426, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, -1, 
	-1, 426, 426, 426, 426, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 41, 215, 426, 426, 426, -1, 426, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 426, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	426, -1, -1, 426, -1, -1, 426, 426, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 426, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 426, 426, 426, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, -1, -1, 426, 426, 426, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 42, 426, 426, 
	426, -1, 426, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 426, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 426, -1, -1, 426, -1, 
	-1, 426, 426, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 426, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	426, 426, 426, 426, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, 426, 426, -1, -1, 
	426, 426, 426, 426, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	43, 44, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 248, 465, 466, 467, -1, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 246, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 463, -1, -1, 461, 
	462, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 468, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 457, 458, 
	459, 460, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 469, 470, -1, -1, -1, 
	471, 472, 39, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 454, 
	-1, 456, -1, 452, 455, 214, -1, -1, 
	214, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 214, 214, 214, 214, -1, -1, 
	-1, -1, -1, -1, -1, -1, 214, 214, 
	214, 214, 214, 214, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	214, 214, -1, -1, -1, -1, -1, -1, 
	-1, 45, 46, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 47, 49, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 48, 52, 238, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 234, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 236, 51, 50, 242, 244, 53, 
	432, 433, 434, -1, 430, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 431, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 216, -1, -1, 
	463, -1, -1, 461, 462, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 435, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 457, 458, 459, 460, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 60, 55, 54, 469, 
	470, 56, 58, 59, 471, 472, 39, 57, 
	-1, -1, 61, 62, 63, 451, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 425, 429, 427, 428, 436, 432, 433, 
	434, -1, 430, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 431, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 217, -1, -1, 463, -1, 
	-1, 461, 462, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 435, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	457, 458, 459, 460, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 60, 55, 54, 469, 470, 56, 
	58, 59, 471, 472, 39, 57, -1, -1, 
	61, 62, 63, 451, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 425, 
	429, 427, 428, 436, 432, 433, 434, -1, 
	430, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 431, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 218, -1, -1, 463, -1, -1, 461, 
	462, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 435, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 457, 458, 
	459, 460, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	60, 55, 54, 469, 470, 56, 58, 59, 
	471, 472, 39, 57, -1, -1, 61, 62, 
	63, 451, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 425, 429, 427, 
	428, 436, 432, 433, 434, -1, 430, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 431, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 219, 
	-1, -1, 463, -1, -1, 461, 462, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	435, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 457, 458, 459, 460, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 60, 55, 
	54, 469, 470, 56, 58, 59, 471, 472, 
	39, 57, -1, -1, 61, 62, 63, 451, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 425, 429, 427, 428, 436, 
	453, 453, 453, -1, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	453, -1, -1, 453, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, 453, 453, 453, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	453, -1, -1, -1, 453, 453, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 64, 223, -1, -1, 18, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	5, 6, 7, 8, -1, -1, -1, -1, 
	-1, -1, -1, -1, 220, 12, 13, 16, 
	14, 15, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 10, 9, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	213, 481, 482, 483, 484, 485, 486, 487, 
	488, 489, 490, 491, 492, 493, 494, 495, 
	-1, 11, 3, 4, 73, -1, -1, -1, 
	-1, -1, -1, 83, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 75, -1, 410, 412, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 81, 
	-1, 399, 400, 401, -1, 79, 77, 78, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 65, -1, -1, -1, -1, -1, 263, 
	-1, -1, -1, -1, 76, -1, -1, -1, 
	-1, -1, -1, -1, 66, 67, 270, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 384, 388, -1, -1, 80, 82, 
	73, -1, -1, -1, -1, -1, -1, 83, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 74, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	75, -1, 410, 412, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 86, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81, -1, 399, 400, 401, 
	-1, 79, 77, 78, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 85, 84, -1, 
	-1, -1, -1, 263, -1, -1, -1, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 
	66, 67, 270, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 384, 388, 
	-1, -1, 80, 82, 73, -1, -1, -1, 
	-1, -1, -1, 83, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 75, -1, 410, 412, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 81, 
	-1, 399, 400, 401, -1, 79, 77, 78, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 89, 231, 
	-1, -1, -1, -1, 76, -1, -1, -1, 
	-1, -1, -1, -1, -1, 67, 270, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 384, 388, -1, -1, 80, 82, 
	88, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 228, 87, 239, 
	237, -1, -1, 90, 426, 426, 426, -1, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 426, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 426, -1, -1, 426, -1, -1, 426, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 426, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 426, 426, 
	426, 426, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, 426, 426, -1, -1, 426, 426, 
	426, 426, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 91, 478, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 477, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 92, -1, -1, 
	-1, -1, 93, 437, 453, 453, 453, -1, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 453, -1, -1, 453, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, 453, 
	453, 453, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, 453, -1, -1, -1, 
	453, 453, 453, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 94, 96, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 478, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 477, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 95, -1, -1, -1, -1, 
	93, 100, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 478, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 477, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 99, -1, -1, 
	-1, -1, 93, 98, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 478, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 477, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 97, 
	-1, -1, -1, -1, 93, 445, 446, 102, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 478, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 477, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 101, -1, -1, -1, -1, 
	93, 449, 450, 465, 466, 467, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 247, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 463, -1, -1, 461, 462, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 468, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 457, 458, 459, 
	460, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 469, 470, -1, -1, -1, 471, 
	472, 39, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 454, -1, 
	456, -1, 452, 455, 109, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 224, 111, -1, -1, 258, 
	-1, -1, 258, 112, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 258, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 258, 110, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	258, -1, -1, -1, -1, -1, 113, 73, 
	-1, -1, -1, -1, 264, -1, 83, 264, 
	-1, -1, 264, 23, 114, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 264, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 74, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 264, 264, -1, -1, -1, 68, 75, 
	-1, 410, 412, -1, 115, 116, 117, -1, 
	264, -1, -1, -1, -1, -1, 264, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 81, -1, 399, 400, 401, -1, 
	79, 77, 78, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 76, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 265, 70, -1, 71, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 72, 
	-1, -1, -1, -1, -1, 384, 388, -1, 
	-1, 80, 82, 391, -1, -1, 391, 391, 
	391, -1, 391, 391, 391, 391, 391, 391, 
	391, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 104, 391, 391, -1, 
	391, 391, 391, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	391, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 391, 391, -1, 
	-1, -1, 391, 391, -1, 391, 391, -1, 
	391, 391, 391, 391, 391, 391, -1, -1, 
	-1, -1, 391, -1, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, -1, 
	391, 391, 391, -1, 391, 391, 391, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	391, 391, 391, 272, -1, -1, -1, -1, 
	272, -1, 272, 272, -1, -1, 272, 272, 
	272, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 272, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	272, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 272, 272, -1, 
	-1, -1, 272, 272, -1, 272, 272, -1, 
	272, 272, 272, 118, 272, -1, -1, -1, 
	-1, -1, 272, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 272, -1, 
	272, 272, 272, -1, 272, 272, 272, 274, 
	-1, -1, 128, 127, 274, -1, 274, 274, 
	-1, -1, 274, 274, 274, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 274, 130, -1, 129, -1, 126, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 274, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 274, 274, -1, -1, -1, 274, 274, 
	-1, 274, 274, -1, 274, 274, 274, 274, 
	274, -1, -1, -1, -1, -1, 274, -1, 
	291, 293, 295, 131, 336, 340, 342, 344, 
	338, 346, 348, 352, 354, 356, 350, 358, 
	324, 328, 330, 332, 326, 334, 300, 304, 
	306, 308, 302, 310, 312, 316, 318, 320, 
	314, 322, 274, -1, 274, 274, 274, -1, 
	274, 274, 274, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 298, 297, 299, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 119, -1, -1, 
	120, 121, 122, 123, 124, 125, 286, -1, 
	-1, 286, 286, 286, -1, 286, 286, 376, 
	379, 286, 286, 286, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	286, 286, -1, 286, 378, 286, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 286, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	132, 286, -1, -1, -1, 286, 286, -1, 
	286, 286, -1, 286, 286, 286, 286, 286, 
	377, -1, -1, -1, -1, 286, -1, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, -1, 286, 286, 286, -1, 286, 
	286, 286, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 286, 286, 286, 73, -1, 
	-1, -1, -1, -1, -1, 83, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 74, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 392, 75, -1, 
	410, 412, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 81, -1, 399, 400, 401, -1, 79, 
	77, 78, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 76, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 386, 388, -1, -1, 
	80, 82, 73, -1, -1, -1, -1, -1, 
	-1, 83, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 74, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 392, 75, -1, 410, 412, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 81, -1, 399, 
	400, 401, -1, 79, 77, 78, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 76, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	387, 388, -1, -1, 80, 82, 389, -1, 
	-1, 389, 389, 389, -1, 389, 389, 389, 
	389, 389, 389, 389, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	389, 389, -1, 389, 389, 389, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 389, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	389, 389, -1, -1, -1, 389, 389, -1, 
	389, 389, 406, 389, 389, 389, 389, 389, 
	389, -1, -1, -1, -1, 389, 406, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, -1, 389, 389, 389, -1, 389, 
	389, 389, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 389, 389, 389, 390, -1, 
	-1, 390, 390, 390, -1, 390, 390, 390, 
	390, 390, 390, 390, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	390, 390, -1, 390, 390, 390, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 390, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	390, 390, -1, -1, -1, 390, 390, -1, 
	390, 390, 408, 390, 390, 390, 390, 390, 
	390, -1, -1, -1, -1, 390, 408, 390, 
	390, 390, 390, 390, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 390, 
	390, 390, -1, 390, 390, 390, -1, 390, 
	390, 390, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 390, 390, 390, 422, -1, 
	-1, -1, 422, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 107, 422, -1, -1, -1, 422, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 108, 
	414, 414, 414, -1, 414, -1, -1, 414, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	106, 133, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 134, 73, -1, 
	-1, -1, -1, -1, -1, 83, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 74, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 68, 75, -1, 
	410, 412, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 81, -1, 399, 400, 401, -1, 79, 
	77, 78, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 263, -1, -1, -1, -1, 76, -1, 
	-1, -1, -1, -1, -1, -1, 105, 67, 
	270, 70, -1, 71, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 72, -1, 
	-1, -1, -1, -1, 384, 388, -1, -1, 
	80, 82, 73, -1, -1, -1, -1, -1, 
	-1, 83, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 74, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 68, 75, -1, 410, 412, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 81, -1, 399, 
	400, 401, -1, 79, 77, 78, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 263, -1, -1, 
	-1, -1, 76, -1, -1, -1, -1, -1, 
	-1, -1, 135, 67, 270, 70, -1, 71, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 72, -1, -1, -1, -1, -1, 
	384, 388, -1, -1, 80, 82, 73, -1, 
	-1, -1, -1, -1, -1, 83, -1, -1, 
	-1, -1, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 74, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 68, 75, -1, 
	410, 412, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 81, -1, 399, 400, 401, -1, 79, 
	77, 78, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 103, -1, -1, -1, -1, 
	-1, 263, -1, -1, -1, -1, 76, -1, 
	-1, -1, -1, -1, -1, -1, 66, 67, 
	270, 70, -1, 71, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 72, -1, 
	-1, -1, -1, -1, 384, 388, -1, -1, 
	80, 82, 225, 109, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 250, 73, -1, -1, -1, -1, 
	-1, -1, 83, -1, -1, -1, -1, 22, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	74, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 69, 75, -1, 410, 412, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 81, -1, 
	399, 400, 401, -1, 79, 77, 78, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	220, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 497, -1, -1, 
	496, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 222, 138, -1, 
	137, -1, -1, -1, -1, -1, 263, -1, 
	-1, -1, -1, 76, -1, -1, 136, 253, 
	-1, -1, -1, 66, 67, 270, 70, -1, 
	71, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 72, -1, -1, -1, -1, 
	-1, 384, 388, -1, -1, 80, 82, 229, 
	-1, -1, 140, 139, 232, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 141, 234, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 235, 432, 433, 434, -1, 
	430, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 431, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 241, -1, -1, 463, -1, -1, 461, 
	462, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 435, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 457, 458, 
	459, 460, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	60, 55, 54, 469, 470, 56, 58, 59, 
	471, 472, 39, 57, -1, -1, 61, 62, 
	63, 451, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 425, 429, 427, 
	428, 436, 473, 480, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 142, 465, 466, 
	467, -1, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 438, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 463, -1, 
	-1, 461, 462, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 468, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	457, 458, 459, 460, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 469, 470, -1, 
	-1, -1, 471, 472, 39, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 454, -1, 456, -1, 452, 455, 439, 
	453, 453, 453, -1, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	453, -1, -1, 453, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, 453, 453, 453, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	453, -1, -1, -1, 453, 453, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 143, 443, 453, 453, 453, -1, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 453, -1, -1, 453, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, 453, 
	453, 453, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, 453, -1, -1, -1, 
	453, 453, 453, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 144, 441, 
	453, 453, 453, -1, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	453, -1, -1, 453, 453, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, 453, 453, 453, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	453, -1, -1, -1, 453, 453, 453, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 145, 447, 453, 453, 453, -1, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 453, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 453, -1, -1, 453, 
	453, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 453, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 453, 453, 
	453, 453, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 453, 453, -1, -1, -1, 
	453, 453, 453, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 146, 405, 
	-1, -1, 109, 73, -1, -1, -1, -1, 
	-1, -1, 83, -1, -1, -1, -1, 22, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	74, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 68, 75, -1, 410, 412, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 81, -1, 
	399, 400, 401, -1, 79, 77, 78, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 76, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 271, 70, -1, 
	71, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 72, -1, -1, -1, -1, 
	-1, 384, 388, -1, -1, 80, 82, 111, 
	-1, -1, -1, -1, -1, 147, 112, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 110, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 113, 395, 149, 150, -1, 419, -1, 
	-1, 420, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 413, 148, 
	393, -1, -1, -1, 151, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 421, 394, -1, -1, -1, 
	151, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 421, 
	73, -1, -1, -1, -1, -1, -1, 83, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 74, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	75, -1, 410, 412, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81, -1, 399, 400, 401, 
	-1, 79, 77, 78, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 263, -1, -1, -1, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 
	152, 67, 270, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 384, 388, 
	-1, -1, 80, 82, 73, -1, -1, -1, 
	-1, -1, -1, 83, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 75, -1, 410, 412, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 81, 
	-1, 399, 400, 401, -1, 79, 77, 78, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 259, 
	-1, -1, -1, -1, 76, -1, -1, -1, 
	-1, -1, -1, -1, -1, 67, 270, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 384, 388, -1, -1, 80, 82, 
	73, -1, -1, -1, -1, -1, -1, 83, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 74, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	75, -1, 410, 412, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81, -1, 399, 400, 401, 
	-1, 79, 77, 78, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 260, -1, -1, -1, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 
	-1, 67, 270, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 384, 388, 
	-1, -1, 80, 82, 73, -1, -1, -1, 
	-1, -1, -1, 83, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 75, -1, 410, 412, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 81, 
	-1, 399, 400, 401, -1, 79, 77, 78, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 261, 
	-1, -1, -1, -1, 76, -1, -1, -1, 
	-1, -1, -1, -1, -1, 67, 270, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 384, 388, -1, -1, 80, 82, 
	73, -1, -1, -1, -1, -1, -1, 83, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 74, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	75, -1, 410, 412, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81, -1, 399, 400, 401, 
	-1, 79, 77, 78, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 262, -1, -1, -1, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 
	-1, 67, 270, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 384, 388, 
	-1, -1, 80, 82, 73, -1, -1, -1, 
	-1, -1, -1, 83, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 75, -1, 410, 412, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 81, 
	-1, 399, 400, 401, -1, 79, 77, 78, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 76, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 266, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 384, 388, -1, -1, 80, 82, 
	73, -1, -1, -1, -1, -1, -1, 83, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 74, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	75, -1, 410, 412, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81, -1, 399, 400, 401, 
	-1, 79, 77, 78, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 267, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 384, 388, 
	-1, -1, 80, 82, 73, -1, -1, -1, 
	-1, -1, -1, 83, -1, -1, -1, -1, 
	22, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 74, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 68, 75, -1, 410, 412, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 81, 
	-1, 399, 400, 401, -1, 79, 77, 78, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 76, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 268, 70, 
	-1, 71, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 72, -1, -1, -1, 
	-1, -1, 384, 388, -1, -1, 80, 82, 
	73, -1, -1, -1, -1, -1, -1, 83, 
	-1, -1, -1, -1, 22, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 74, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 68, 
	75, -1, 410, 412, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 81, -1, 399, 400, 401, 
	-1, 79, 77, 78, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 269, 70, -1, 71, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	72, -1, -1, -1, -1, -1, 384, 388, 
	-1, -1, 80, 82, 475, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 273, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 153, 154, -1, 
	-1, 157, -1, 158, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 156, -1, -1, -1, -1, 155, -1, 
	-1, 372, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 275, 362, -1, 
	-1, -1, -1, -1, -1, -1, 276, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	360, -1, -1, 371, 159, -1, -1, -1, 
	-1, -1, -1, 160, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 156, -1, 
	-1, -1, -1, 155, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 278, 362, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 156, -1, -1, -1, -1, 155, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 280, 362, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	360, 160, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 156, -1, -1, -1, 
	-1, 155, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	281, 362, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 360, 160, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 156, 
	-1, -1, -1, -1, 155, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 282, 362, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 360, 160, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 156, -1, -1, -1, -1, 155, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 283, 362, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 360, 161, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 156, -1, -1, 
	-1, -1, 155, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 284, 362, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 360, 287, -1, -1, 
	287, -1, 287, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	287, -1, -1, -1, -1, 287, -1, -1, 
	287, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 333, 345, 
	357, 309, 321, 288, -1, -1, 288, -1, 
	288, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 288, -1, 
	-1, -1, -1, 288, -1, -1, 288, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 296, -1, 331, 343, 355, 307, 
	319, 289, -1, -1, 289, -1, 289, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 289, -1, -1, -1, 
	-1, 289, -1, -1, 289, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	294, -1, 329, 341, 353, 305, 317, 290, 
	-1, -1, 290, -1, 290, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 290, -1, -1, -1, -1, 290, 
	-1, -1, 290, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 292, -1, 
	325, 337, 349, 301, 313, 327, 339, 351, 
	303, 315, 335, 347, 359, 311, 323, 163, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 385, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 162, 22, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 407, -1, 
	410, 412, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 409, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	396, 22, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 407, -1, 410, 
	412, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 409, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 397, 
	111, -1, -1, -1, -1, -1, 164, 112, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 110, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 113, 73, -1, -1, -1, -1, 
	-1, -1, 83, -1, 168, -1, -1, 22, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	74, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 69, 75, -1, 410, 412, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 81, -1, 
	399, 400, 401, -1, 79, 77, 78, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	220, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 497, -1, -1, 
	496, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 222, 138, -1, 
	137, -1, -1, -1, -1, -1, 263, -1, 
	-1, -1, -1, 76, -1, -1, -1, 252, 
	-1, -1, -1, 66, 67, 270, 70, -1, 
	71, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 72, -1, -1, -1, -1, 
	-1, 384, 388, -1, -1, 80, 82, 109, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 256, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 156, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 167, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 166, -1, 255, 17, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 165, 226, 88, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	227, 73, -1, -1, -1, -1, -1, -1, 
	83, -1, -1, -1, -1, 22, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 74, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	68, 75, -1, 410, 412, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 81, -1, 399, 400, 
	401, -1, 79, 77, 78, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 230, -1, -1, -1, 
	-1, 76, -1, -1, -1, -1, -1, -1, 
	-1, -1, 67, 270, 70, -1, 71, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 72, -1, -1, -1, -1, -1, 384, 
	388, -1, -1, 80, 82, 476, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 476, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 169, 465, 466, 467, -1, 464, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 440, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 463, -1, -1, 461, 462, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 468, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 457, 458, 459, 
	460, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 469, 470, -1, -1, -1, 471, 
	472, 39, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 454, -1, 
	456, -1, 452, 455, 465, 466, 467, -1, 
	464, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 444, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 463, -1, -1, 461, 
	462, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 468, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 457, 458, 
	459, 460, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 469, 470, -1, -1, -1, 
	471, 472, 39, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 454, 
	-1, 456, -1, 452, 455, 465, 466, 467, 
	-1, 464, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	442, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 463, -1, -1, 
	461, 462, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 468, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 457, 
	458, 459, 460, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 469, 470, -1, -1, 
	-1, 471, 472, 39, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	454, -1, 456, -1, 452, 455, 465, 466, 
	467, -1, 464, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 448, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 463, -1, 
	-1, 461, 462, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 468, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	457, 458, 459, 460, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 469, 470, -1, 
	-1, -1, 471, 472, 39, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 454, -1, 456, -1, 452, 455, 160, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 156, -1, -1, -1, -1, 155, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 170, 362, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 360, 416, 416, 416, -1, 416, 415, 
	-1, 416, 422, -1, -1, -1, 422, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 171, 422, 
	-1, -1, -1, 422, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 172, 423, -1, -1, 173, 
	423, 111, -1, -1, 257, -1, -1, 257, 
	112, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 257, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 257, 110, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 257, -1, -1, 
	-1, -1, -1, 113, 480, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 174, 177, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	175, -1, -1, -1, -1, -1, -1, -1, 
	-1, 176, 367, -1, -1, 367, 367, 367, 
	-1, 180, 367, -1, -1, 367, 367, 367, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 367, 367, -1, 367, 
	-1, 367, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 367, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 367, 367, -1, -1, 
	-1, 367, 367, -1, 367, 367, -1, 367, 
	367, 367, 367, 367, -1, -1, -1, -1, 
	-1, 367, -1, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, -1, 367, 367, 367, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 367, 
	367, 367, 426, 426, 426, -1, 426, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 426, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 426, 
	-1, -1, 426, -1, -1, 426, 426, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	426, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 426, 426, 426, 426, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 426, 426, 
	426, 426, 426, 426, 426, 426, 426, 426, 
	426, 426, -1, -1, 426, 426, 426, 426, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 178, 373, 374, 160, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 156, -1, -1, -1, -1, 155, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 279, 362, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 360, 155, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 176, 182, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 181, -1, 176, 
	184, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 380, 385, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 183, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 156, -1, -1, -1, -1, 155, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 185, 362, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	360, 46, 499, 160, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 156, -1, 
	-1, -1, -1, 155, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 254, 362, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 251, 479, 
	186, 417, -1, -1, -1, 151, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 421, 418, -1, -1, 
	-1, 151, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	421, 424, 474, -1, -1, -1, -1, 474, 
	-1, 474, 474, -1, -1, 474, 474, 474, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 474, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 474, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 474, 474, -1, -1, 
	-1, 474, 474, -1, 474, 474, -1, 474, 
	474, 474, 474, 474, -1, -1, -1, 169, 
	-1, 474, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 474, -1, 474, 
	474, 474, -1, 474, 474, 474, 187, 361, 
	179, 367, -1, -1, 370, 432, 433, 434, 
	-1, 430, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	431, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 369, -1, -1, 463, -1, -1, 
	461, 462, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 435, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 457, 
	458, 459, 460, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 60, 55, 54, 469, 470, 56, 58, 
	59, 471, 472, 39, 57, -1, -1, 61, 
	62, 63, 451, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 425, 429, 
	427, 428, 436, 160, 366, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 156, -1, 
	-1, -1, -1, 155, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 364, 362, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 189, 188, 
	190, 179, 367, -1, -1, 375, 381, 382, 
	-1, -1, -1, -1, -1, 385, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	191, 192, 160, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 156, -1, -1, 
	-1, -1, 155, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 193, 362, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 360, 157, -1, 158, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 372, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 194, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 371, 
	368, 365, -1, -1, 195, 160, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	156, -1, -1, -1, -1, 155, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 196, 362, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 360, 
	383, 160, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 156, -1, -1, -1, 
	-1, 155, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	197, 362, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 360, 198, 277, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 156, -1, -1, -1, -1, 155, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 363, 362, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	360, 285, 199, 160, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 156, -1, 
	-1, -1, -1, 155, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 200, 362, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 360, 160, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 156, -1, -1, -1, -1, 155, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 201, 362, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	360, 202, 204, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 403, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 203, 160, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 156, 
	-1, -1, -1, -1, 155, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 205, 362, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 360, 404, 
	160, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 156, -1, -1, -1, -1, 
	155, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 402, 
	362, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 360, 206, 160, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 156, 
	-1, -1, -1, -1, 155, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 207, 362, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 360, 208, 
	160, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 156, -1, -1, -1, -1, 
	155, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 209, 
	362, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 360, 398, 
};

unsigned short Parser6_keys[] = {
	128, 240, 238, 238, 128, 241, 128, 261, 
	128, 261, 141, 141, 128, 128, 128, 128, 
	45, 273, 40, 274, 40, 274, 128, 275, 
	123, 128, 123, 123, 123, 123, 123, 123, 
	123, 123, 128, 128, 61, 141, 40, 272, 
	59, 128, 45, 273, 131, 131, 40, 320, 
	40, 258, 40, 258, 59, 59, 40, 258, 
	40, 258, 128, 194, 40, 320, 125, 241, 
	61, 140, 40, 266, 123, 123, 41, 271, 
	59, 59, 59, 59, 40, 40, 40, 317, 
	40, 317, 40, 317, 40, 317, 40, 274, 
	125, 261, 33, 308, 33, 308, 33, 308, 
	131, 265, 41, 41, 41, 44, 40, 258, 
	128, 323, 59, 59, 40, 274, 42, 323, 
	42, 323, 42, 323, 59, 59, 59, 59, 
	42, 323, 59, 59, 59, 59, 40, 320, 
	44, 59, 38, 144, 33, 308, 33, 208, 
	33, 188, 33, 295, 33, 208, 33, 308, 
	33, 308, 33, 208, 33, 208, 189, 305, 
	189, 305, 186, 306, 133, 145, 33, 308, 
	33, 308, 33, 308, 59, 59, 44, 59, 
	33, 308, 41, 44, 44, 44, 59, 124, 
	128, 269, 40, 317, 41, 41, 128, 322, 
	40, 320, 59, 59, 40, 274, 59, 59, 
	40, 274, 59, 59, 40, 274, 59, 59, 
	40, 274, 41, 44, 33, 308, 38, 144, 
	186, 311, 189, 312, 189, 312, 33, 308, 
	33, 308, 33, 308, 33, 308, 33, 308, 
	33, 308, 33, 308, 33, 308, 33, 308, 
	128, 321, 40, 301, 33, 298, 40, 298, 
	40, 298, 40, 298, 40, 298, 40, 298, 
	40, 213, 40, 213, 40, 213, 40, 213, 
	209, 213, 209, 213, 44, 302, 45, 307, 
	45, 307, 38, 144, 33, 308, 44, 280, 
	128, 261, 131, 131, 131, 264, 33, 308, 
	41, 142, 40, 320, 40, 320, 40, 320, 
	40, 320, 40, 298, 186, 193, 189, 305, 
	189, 305, 189, 193, 38, 144, 128, 322, 
	128, 298, 33, 208, 40, 258, 131, 131, 
	131, 131, 40, 298, 128, 298, 128, 298, 
	44, 125, 131, 302, 40, 298, 61, 61, 
	59, 59, 40, 298, 124, 124, 128, 128, 
	44, 44, 189, 312, 189, 312, 193, 193, 
	33, 188, 44, 44, 41, 41, 40, 44, 
	40, 317, 40, 300, 44, 44, 40, 44, 
	125, 125, 125, 302, 44, 44, 40, 298, 
	43, 301, 41, 41, 41, 44, 40, 298, 
	125, 125, 40, 298, 44, 44, 41, 41, 
	40, 298, 41, 41, 44, 44, 40, 298, 
	40, 298, 44, 44, 44, 309, 40, 298, 
	181, 181, 40, 298, 44, 44, 40, 298, 
	44, 44, 40, 298, 181, 181, 0, 0
};

unsigned int Parser6_offsets[] = {
	0, 113, 114, 228, 362, 496, 497, 498, 
	499, 728, 963, 1198, 1346, 1352, 1353, 1354, 
	1355, 1356, 1357, 1438, 1671, 1741, 1970, 1971, 
	2252, 2471, 2690, 2691, 2910, 3129, 3196, 3477, 
	3594, 3674, 3901, 3902, 4133, 4134, 4135, 4136, 
	4414, 4692, 4970, 5248, 5483, 5620, 5896, 6172, 
	6448, 6583, 6584, 6588, 6807, 7003, 7004, 7239, 
	7521, 7803, 8085, 8086, 8087, 8369, 8370, 8371, 
	8652, 8668, 8775, 9051, 9227, 9383, 9646, 9822, 
	10098, 10374, 10550, 10726, 10843, 10960, 11081, 11094, 
	11370, 11646, 11922, 11923, 11939, 12215, 12219, 12220, 
	12286, 12428, 12706, 12707, 12902, 13183, 13184, 13419, 
	13420, 13655, 13656, 13891, 13892, 14127, 14131, 14407, 
	14514, 14640, 14764, 14888, 15164, 15440, 15716, 15992, 
	16268, 16544, 16820, 17096, 17372, 17566, 17828, 18094, 
	18353, 18612, 18871, 19130, 19389, 19563, 19737, 19911, 
	20085, 20090, 20095, 20354, 20617, 20880, 20987, 21263, 
	21500, 21634, 21635, 21769, 22045, 22147, 22428, 22709, 
	22990, 23271, 23530, 23538, 23655, 23772, 23777, 23884, 
	24079, 24250, 24426, 24645, 24646, 24647, 24906, 25077, 
	25248, 25330, 25502, 25761, 25762, 25763, 26022, 26023, 
	26024, 26025, 26149, 26273, 26274, 26430, 26431, 26432, 
	26437, 26715, 26976, 26977, 26982, 26983, 27161, 27162, 
	27421, 27680, 27681, 27685, 27944, 27945, 28204, 28205, 
	28206, 28465, 28466, 28467, 28726, 28985, 28986, 29252, 
	29511, 29512, 29771, 29772, 30031, 30032, 30291, 30292
};

unsigned short Parser6_targs[] = {
	1, 2, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 18, 19, 20, 21, 22, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 67, 68, 69, 
	70, 71, 72, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 177, 178, 179, 180, 
	181, 182, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 193, 194, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207
};

unsigned int Parser6_actInds[] = {
	0, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 22, 24, 26, 28, 30, 
	32, 34, 36, 39, 41, 43, 45, 47, 
	50, 52, 54, 56, 58, 60, 62, 64, 
	66, 68, 70, 72, 74, 76, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	114, 116, 118, 120, 122, 124, 126, 128, 
	130, 132, 134, 136, 138, 140, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 364, 367, 369, 371, 
	373, 375, 377, 379, 381, 383, 385, 387, 
	389, 391, 393, 395, 397, 399, 401, 403, 
	405, 407, 409, 411, 413, 415, 417, 419, 
	421, 423, 425, 427, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 543, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 567, 569, 571, 573, 575, 577, 579, 
	581, 583, 585, 587, 589, 591, 593, 595, 
	597, 599, 601, 603, 605, 607, 609, 611, 
	613, 615, 617, 619, 621, 623, 625, 627, 
	629, 631, 633, 635, 637, 639, 641, 643, 
	645, 647, 649, 651, 653, 655, 657, 659, 
	661, 663, 665, 667, 669, 671, 673, 675, 
	677, 679, 681, 683, 685, 687, 689, 691, 
	693, 695, 697, 699, 701, 703, 705, 707, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 763, 765, 767, 769, 771, 
	773, 775, 777, 779, 781, 783, 785, 787, 
	789, 791, 793, 795, 797, 799, 801, 803, 
	805, 807, 809, 811, 813, 815, 817, 819, 
	821, 823, 825, 827, 829, 831, 833, 835, 
	837, 839, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 893, 895, 897, 899, 
	901, 903, 905, 907, 909, 911, 913, 915, 
	917, 919, 921, 923, 925, 927, 929, 931, 
	933, 935, 937, 939, 941, 943, 945, 947, 
	949, 951, 953, 955, 957, 959, 961, 963, 
	965, 967, 969, 971, 973, 975, 977, 979, 
	981, 983, 985, 987, 989, 991, 993, 995, 
	997, 999, 1001, 1003
};

unsigned int Parser6_actions[] = {
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 110, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 290, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 110, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 378, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 1, 0, 
	1, 0, 1, 0, 702, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 2, 0, 7, 0, 10, 0, 15, 
	0, 18, 0, 83, 0, 87, 0, 91, 
	0, 95, 0, 99, 0, 103, 0, 106, 
	0, 107, 0, 115, 0, 119, 0, 123, 
	0, 127, 0, 131, 0, 135, 0, 139, 
	0, 143, 0, 147, 0, 151, 0, 154, 
	0, 159, 0, 163, 0, 167, 0, 170, 
	0, 174, 0, 179, 0, 182, 0, 187, 
	0, 191, 0, 195, 0, 199, 0, 203, 
	0, 207, 0, 211, 0, 215, 0, 218, 
	0, 222, 0, 227, 0, 231, 0, 235, 
	0, 251, 0, 255, 0, 258, 0, 262, 
	0, 266, 0, 271, 0, 275, 0, 279, 
	0, 283, 0, 287, 0, 290, 0, 295, 
	0, 299, 0, 303, 0, 307, 0, 311, 
	0, 315, 0, 319, 0, 322, 0, 327, 
	0, 330, 0, 335, 0, 339, 0, 343, 
	0, 347, 0, 351, 0, 355, 0, 359, 
	0, 363, 0, 367, 0, 371, 0, 375, 
	0, 378, 0, 382, 0, 386, 0, 390, 
	0, 394, 0, 399, 0, 403, 0, 407, 
	0, 411, 0, 415, 0, 419, 0, 423, 
	0, 427, 0, 431, 0, 435, 0, 439, 
	0, 443, 0, 447, 0, 451, 0, 455, 
	0, 459, 0, 463, 0, 467, 0, 471, 
	0, 475, 0, 479, 0, 483, 0, 487, 
	0, 491, 0, 495, 0, 499, 0, 503, 
	0, 507, 0, 511, 0, 515, 0, 519, 
	0, 523, 0, 527, 0, 531, 0, 535, 
	0, 539, 0, 543, 0, 547, 0, 551, 
	0, 555, 0, 559, 0, 563, 0, 567, 
	0, 571, 0, 575, 0, 579, 0, 583, 
	0, 587, 0, 591, 0, 595, 0, 599, 
	0, 603, 0, 607, 0, 611, 0, 615, 
	0, 619, 0, 623, 0, 627, 0, 631, 
	0, 635, 0, 639, 0, 643, 0, 647, 
	0, 651, 0, 655, 0, 659, 0, 663, 
	0, 667, 0, 671, 0, 675, 0, 679, 
	0, 683, 0, 687, 0, 691, 0, 694, 
	0, 698, 0, 702, 0, 707, 0, 711, 
	0, 714, 0, 719, 0, 723, 0, 727, 
	0, 731, 0, 734, 0, 739, 0, 743, 
	0, 747, 0, 751, 0, 755, 0, 759, 
	0, 763, 0, 767, 0, 771, 0, 775, 
	0, 779, 0, 783, 0, 787, 0, 790, 
	0, 794, 0, 798, 0, 799, 0, 803, 
	0, 807, 0, 811, 0, 815, 0, 819, 
	0, 823, 0, 827, 0, 831, 0, 835, 
	0, 839, 0, 842, 0, 847, 0, 851, 
	0, 854, 0, 855, 0, 858, 0, 859, 
	0, 863, 0, 867, 0, 871, 0, 875, 
	0, 878, 0, 883, 0, 886, 0, 891, 
	0, 895, 0, 899, 0, 903, 0, 907, 
	0, 910, 0, 914, 0, 919, 0, 923, 
	0, 926, 0, 931, 0, 935, 0, 939, 
	0, 943, 0, 947, 0, 951, 0, 955, 
	0, 959, 0, 963, 0, 967, 0, 971, 
	0, 975, 0, 979, 0, 983, 0, 987, 
	0, 991, 0, 995, 0, 999, 0, 1003, 
	0, 1007, 0, 1011, 0, 1015, 0, 1019, 
	0, 1023, 0, 1027, 0, 1031, 0, 1034, 
	0, 1039, 0, 1043, 0, 1047, 0, 1051, 
	0, 1055, 0, 1059, 0, 1063, 0, 1067, 
	0, 1071, 0, 1075, 0, 1079, 0, 1083, 
	0, 1087, 0, 1091, 0, 1095, 0, 1099, 
	0, 1103, 0, 1107, 0, 1111, 0, 1115, 
	0, 1118, 0, 1122, 0, 1126, 0, 1131, 
	0, 1134, 0, 1139, 0, 1143, 0, 23, 
	0, 27, 0, 31, 0, 35, 0, 39, 
	0, 43, 0, 47, 0, 51, 0, 55, 
	0, 59, 0, 63, 0, 67, 0, 71, 
	0, 75, 0, 79, 0, 239, 0, 243, 
	0, 1, 0, 247, 0
};

int Parser6_commitLen[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 3
};

char Parser6_prodLengths[] = {
	1, 3, 0, 2, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 4, 4, 4, 
	4, 1, 1, 0, 4, 5, 5, 3, 
	3, 1, 3, 3, 1, 5, 1, 1, 
	3, 1, 1, 0, 3, 0, 6, 4, 
	3, 4, 3, 3, 5, 2, 0, 1, 
	4, 2, 1, 1, 1, 3, 2, 1, 
	0, 3, 1, 3, 3, 3, 3, 1, 
	1, 2, 3, 3, 3, 3, 1, 3, 
	1, 3, 1, 3, 3, 7, 3, 4, 
	3, 3, 3, 3, 3, 7, 1, 1, 
	1, 1, 1, 1, 2, 1, 2, 1, 
	2, 1, 1, 1, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 3, 1, 3, 1, 1, 0, 1, 
	4, 3, 1, 1, 1, 2, 2, 1, 
	2, 2, 2, 2, 4, 5, 5, 6, 
	1, 1, 2, 2, 1, 1, 1, 1, 
	3, 3, 3, 3, 3, 15, 1, 1, 
	1, 2, 0, 10, 3, 1, 1, 1, 
	2, 1, 2, 0, 2, 1, 3, 3, 
	1, 1, 2, 0, 1, 3, 2, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 3, 3, 4, 3, 4, 
	3, 4, 2, 2, 3, 4, 2, 2, 
	1, 2, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 4, 2, 
	0, 2, 1, 0, 3, 1, 1
};

unsigned short Parser6_prodLhsIds[] = {
	240, 239, 239, 241, 241, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 257, 253, 254, 255, 
	256, 259, 260, 260, 252, 243, 244, 264, 
	265, 265, 266, 267, 267, 245, 261, 269, 
	270, 270, 271, 271, 272, 272, 246, 247, 
	247, 248, 249, 250, 251, 275, 275, 263, 
	263, 276, 276, 277, 277, 277, 278, 278, 
	278, 262, 262, 281, 281, 281, 281, 281, 
	268, 282, 282, 282, 282, 282, 282, 283, 
	283, 284, 284, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 287, 
	287, 287, 287, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	294, 294, 294, 294, 294, 294, 294, 294, 
	294, 294, 294, 294, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	279, 279, 279, 299, 299, 300, 300, 298, 
	298, 280, 289, 288, 301, 301, 301, 296, 
	297, 297, 297, 297, 297, 297, 297, 297, 
	297, 302, 303, 303, 303, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 308, 308, 
	308, 309, 309, 304, 304, 307, 307, 273, 
	273, 273, 306, 306, 310, 310, 311, 311, 
	311, 311, 305, 305, 312, 312, 258, 258, 
	313, 313, 313, 316, 316, 316, 316, 316, 
	316, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 274, 274, 319, 319, 319, 315, 315, 
	315, 315, 315, 315, 315, 320, 320, 320, 
	320, 320, 317, 317, 317, 317, 317, 285, 
	321, 318, 323, 323, 322, 322, 324
};

const char *Parser6_prodNames[] = {
	"start-1",
	"section_list-1",
	"section_list-2",
	"statement_list-1",
	"statement_list-2",
	"statement-1",
	"statement-2",
	"statement-3",
	"statement-4",
	"statement-5",
	"statement-6",
	"statement-7",
	"statement-8",
	"statement-9",
	"statement-10",
	"statement-11",
	"statement-12",
	"statement-13",
	"statement-14",
	"statement-15",
	"length_spec-1",
	"pre_push_spec-1",
	"post_pop_spec-1",
	"nfa_pre_push_spec-1",
	"nfa_post_pop_spec-1",
	"export_open-1",
	"opt_export-1",
	"opt_export-2",
	"export_block-1",
	"assignment-1",
	"instantiation-1",
	"nfa_round_spec-1",
	"nfa_round_list-1",
	"nfa_round_list-2",
	"nfa_rounds-1",
	"nfa_expr-1",
	"nfa_expr-2",
	"nfa_union-1",
	"machine_name-1",
	"action_param-1",
	"action_param_list-1",
	"action_param_list-2",
	"opt_action_param_list-1",
	"opt_action_param_list-2",
	"opt_action_params-1",
	"opt_action_params-2",
	"action_spec-1",
	"alphtype_spec-1",
	"alphtype_spec-2",
	"range_spec-1",
	"getkey_spec-1",
	"access_spec-1",
	"variable_spec-1",
	"opt_whitespace-1",
	"opt_whitespace-2",
	"join_or_lm-1",
	"join_or_lm-2",
	"lm_part_list-1",
	"lm_part_list-2",
	"longest_match_part-1",
	"longest_match_part-2",
	"longest_match_part-3",
	"opt_lm_part_action-1",
	"opt_lm_part_action-2",
	"opt_lm_part_action-3",
	"join-1",
	"join-2",
	"expression-1",
	"expression-2",
	"expression-3",
	"expression-4",
	"expression-5",
	"term_short-1",
	"term-1",
	"term-2",
	"term-3",
	"term-4",
	"term-5",
	"term-6",
	"factor_with_label-1",
	"factor_with_label-2",
	"factor_with_ep-1",
	"factor_with_ep-2",
	"factor_with_aug-1",
	"factor_with_aug-2",
	"factor_with_aug-3",
	"factor_with_aug-4",
	"factor_with_aug-5",
	"factor_with_aug-6",
	"factor_with_aug-7",
	"factor_with_aug-8",
	"factor_with_aug-9",
	"factor_with_aug-10",
	"factor_with_aug-11",
	"factor_with_aug-12",
	"aug_type_base-1",
	"aug_type_base-2",
	"aug_type_base-3",
	"aug_type_base-4",
	"aug_type_cond-1",
	"aug_type_cond-2",
	"aug_type_cond-3",
	"aug_type_cond-4",
	"aug_type_cond-5",
	"aug_type_cond-6",
	"aug_type_cond-7",
	"aug_type_cond-8",
	"aug_type_cond-9",
	"aug_type_to_state-1",
	"aug_type_to_state-2",
	"aug_type_to_state-3",
	"aug_type_to_state-4",
	"aug_type_to_state-5",
	"aug_type_to_state-6",
	"aug_type_to_state-7",
	"aug_type_to_state-8",
	"aug_type_to_state-9",
	"aug_type_to_state-10",
	"aug_type_to_state-11",
	"aug_type_to_state-12",
	"aug_type_from_state-1",
	"aug_type_from_state-2",
	"aug_type_from_state-3",
	"aug_type_from_state-4",
	"aug_type_from_state-5",
	"aug_type_from_state-6",
	"aug_type_from_state-7",
	"aug_type_from_state-8",
	"aug_type_from_state-9",
	"aug_type_from_state-10",
	"aug_type_from_state-11",
	"aug_type_from_state-12",
	"aug_type_eof-1",
	"aug_type_eof-2",
	"aug_type_eof-3",
	"aug_type_eof-4",
	"aug_type_eof-5",
	"aug_type_eof-6",
	"aug_type_eof-7",
	"aug_type_eof-8",
	"aug_type_eof-9",
	"aug_type_eof-10",
	"aug_type_eof-11",
	"aug_type_eof-12",
	"aug_type_gbl_error-1",
	"aug_type_gbl_error-2",
	"aug_type_gbl_error-3",
	"aug_type_gbl_error-4",
	"aug_type_gbl_error-5",
	"aug_type_gbl_error-6",
	"aug_type_gbl_error-7",
	"aug_type_gbl_error-8",
	"aug_type_gbl_error-9",
	"aug_type_gbl_error-10",
	"aug_type_gbl_error-11",
	"aug_type_gbl_error-12",
	"aug_type_local_error-1",
	"aug_type_local_error-2",
	"aug_type_local_error-3",
	"aug_type_local_error-4",
	"aug_type_local_error-5",
	"aug_type_local_error-6",
	"aug_type_local_error-7",
	"aug_type_local_error-8",
	"aug_type_local_error-9",
	"aug_type_local_error-10",
	"aug_type_local_error-11",
	"aug_type_local_error-12",
	"action_embed-1",
	"action_embed-2",
	"action_embed-3",
	"action_arg_list-1",
	"action_arg_list-2",
	"opt_action_arg_list-1",
	"opt_action_arg_list-2",
	"named_action_ref-1",
	"named_action_ref-2",
	"action_embed_block-1",
	"priority_name-1",
	"priority_aug-1",
	"priority_aug_num-1",
	"priority_aug_num-2",
	"priority_aug_num-3",
	"local_err_name-1",
	"factor_with_rep-1",
	"factor_with_rep-2",
	"factor_with_rep-3",
	"factor_with_rep-4",
	"factor_with_rep-5",
	"factor_with_rep-6",
	"factor_with_rep-7",
	"factor_with_rep-8",
	"factor_with_rep-9",
	"factor_rep_num-1",
	"factor_with_neg-1",
	"factor_with_neg-2",
	"factor_with_neg-3",
	"factor-1",
	"factor-2",
	"factor-3",
	"factor-4",
	"factor-5",
	"factor-6",
	"factor-7",
	"factor-8",
	"factor-9",
	"colon_cond-1",
	"colon_cond-2",
	"colon_cond-3",
	"opt_max_arg-1",
	"opt_max_arg-2",
	"factor-10",
	"factor-11",
	"range_lit-1",
	"range_lit-2",
	"alphabet_num-1",
	"alphabet_num-2",
	"alphabet_num-3",
	"regular_expr-1",
	"regular_expr-2",
	"regular_expr_item-1",
	"regular_expr_item-2",
	"regular_expr_char-1",
	"regular_expr_char-2",
	"regular_expr_char-3",
	"regular_expr_char-4",
	"regular_expr_or_data-1",
	"regular_expr_or_data-2",
	"regular_expr_or_char-1",
	"regular_expr_or_char-2",
	"inline_block-1",
	"inline_block-2",
	"inline_block_item-1",
	"inline_block_item-2",
	"inline_block_item-3",
	"inline_block_symbol-1",
	"inline_block_symbol-2",
	"inline_block_symbol-3",
	"inline_block_symbol-4",
	"inline_block_symbol-5",
	"inline_block_symbol-6",
	"inline_block_interpret-1",
	"inline_block_interpret-2",
	"inline_block_interpret-3",
	"inline_block_interpret-4",
	"inline_block_interpret-5",
	"inline_block_interpret-6",
	"inline_block_interpret-7",
	"inline_block_interpret-8",
	"inline_block_interpret-9",
	"inline_block_interpret-10",
	"inline_block_interpret-11",
	"inline_block_interpret-12",
	"inline_block_interpret-13",
	"inline_block_interpret-14",
	"inline_block_interpret-15",
	"inline_block_interpret-16",
	"inline_expr-1",
	"inline_expr-2",
	"inline_expr_item-1",
	"inline_expr_item-2",
	"inline_expr_item-3",
	"inline_expr_any-1",
	"inline_expr_any-2",
	"inline_expr_any-3",
	"inline_expr_any-4",
	"inline_expr_any-5",
	"inline_expr_any-6",
	"inline_expr_any-7",
	"inline_expr_symbol-1",
	"inline_expr_symbol-2",
	"inline_expr_symbol-3",
	"inline_expr_symbol-4",
	"inline_expr_symbol-5",
	"inline_expr_interpret-1",
	"inline_expr_interpret-2",
	"inline_expr_interpret-3",
	"inline_expr_interpret-4",
	"inline_expr_interpret-5",
	"local_state_ref-1",
	"no_name_sep-1",
	"state_ref-1",
	"opt_name_sep-1",
	"opt_name_sep-2",
	"state_ref_names-1",
	"state_ref_names-2",
	"_start-1"
};

const char *Parser6_lelNames[] = {
	"D-0",
	"D-1",
	"D-2",
	"D-3",
	"D-4",
	"D-5",
	"D-6",
	"D-7",
	"D-8",
	"D-9",
	"D-10",
	"D-11",
	"D-12",
	"D-13",
	"D-14",
	"D-15",
	"D-16",
	"D-17",
	"D-18",
	"D-19",
	"D-20",
	"D-21",
	"D-22",
	"D-23",
	"D-24",
	"D-25",
	"D-26",
	"D-27",
	"D-28",
	"D-29",
	"D-30",
	"D-31",
	"D-32",
	"!",
	"\"",
	"#",
	"$",
	"%",
	"&",
	"'",
	"(",
	")",
	"*",
	"+",
	",",
	"-",
	".",
	"/",
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	":",
	";",
	"<",
	"=",
	">",
	"?",
	"@",
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
	"[",
	"\\",
	"]",
	"^",
	"_",
	"`",
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"k",
	"l",
	"m",
	"n",
	"o",
	"p",
	"q",
	"r",
	"s",
	"t",
	"u",
	"v",
	"w",
	"x",
	"y",
	"z",
	"{",
	"|",
	"}",
	"~",
	"D-127",
	"TK_Word",
	"TK_Literal",
	"TK_EndSection",
	"TK_UInt",
	"TK_Hex",
	"TK_DotDot",
	"TK_ColonGt",
	"TK_ColonGtGt",
	"TK_LtColon",
	"TK_Arrow",
	"TK_DoubleArrow",
	"TK_StarStar",
	"TK_ColonEquals",
	"TK_BarEquals",
	"TK_NameSep",
	"TK_BarStar",
	"TK_DashDash",
	"TK_DotDotIndep",
	"TK_StartCond",
	"TK_AllCond",
	"TK_LeavingCond",
	"TK_Middle",
	"TK_StartGblError",
	"TK_AllGblError",
	"TK_FinalGblError",
	"TK_NotFinalGblError",
	"TK_NotStartGblError",
	"TK_MiddleGblError",
	"TK_StartLocalError",
	"TK_AllLocalError",
	"TK_FinalLocalError",
	"TK_NotFinalLocalError",
	"TK_NotStartLocalError",
	"TK_MiddleLocalError",
	"TK_StartEOF",
	"TK_AllEOF",
	"TK_FinalEOF",
	"TK_NotFinalEOF",
	"TK_NotStartEOF",
	"TK_MiddleEOF",
	"TK_StartToState",
	"TK_AllToState",
	"TK_FinalToState",
	"TK_NotFinalToState",
	"TK_NotStartToState",
	"TK_MiddleToState",
	"TK_StartFromState",
	"TK_AllFromState",
	"TK_FinalFromState",
	"TK_NotFinalFromState",
	"TK_NotStartFromState",
	"TK_MiddleFromState",
	"TK_ColonNfaOpen",
	"TK_CloseColon",
	"TK_ColonCondOpen",
	"TK_ColonCondStarOpen",
	"TK_ColonCondPlusOpen",
	"TK_ColonNoMaxOpen",
	"RE_Slash",
	"RE_SqOpen",
	"RE_SqOpenNeg",
	"RE_SqClose",
	"RE_Dot",
	"RE_Star",
	"RE_Dash",
	"RE_Char",
	"IL_WhiteSpace",
	"IL_Comment",
	"IL_Literal",
	"IL_Symbol",
	"KW_Machine",
	"KW_Include",
	"KW_Import",
	"KW_Write",
	"KW_Action",
	"KW_AlphType",
	"KW_Range",
	"KW_GetKey",
	"KW_InWhen",
	"KW_When",
	"KW_OutWhen",
	"KW_Eof",
	"KW_Err",
	"KW_Lerr",
	"KW_To",
	"KW_From",
	"KW_Export",
	"KW_PrePush",
	"KW_PostPop",
	"KW_Length",
	"KW_NfaPrePush",
	"KW_NfaPostPop",
	"KW_Break",
	"KW_Exec",
	"KW_Hold",
	"KW_PChar",
	"KW_Char",
	"KW_Goto",
	"KW_Call",
	"KW_Ret",
	"KW_CurState",
	"KW_TargState",
	"KW_Entry",
	"KW_Next",
	"KW_Variable",
	"KW_Access",
	"KW_Ncall",
	"KW_Nret",
	"KW_Nbreak",
	"TK_SubstRef",
	"Parser6_tk_eof",
	"section_list",
	"start",
	"statement_list",
	"statement",
	"assignment",
	"instantiation",
	"nfa_union",
	"action_spec",
	"alphtype_spec",
	"range_spec",
	"getkey_spec",
	"access_spec",
	"variable_spec",
	"export_block",
	"pre_push_spec",
	"post_pop_spec",
	"nfa_pre_push_spec",
	"nfa_post_pop_spec",
	"length_spec",
	"inline_block",
	"export_open",
	"opt_export",
	"machine_name",
	"join",
	"join_or_lm",
	"nfa_round_spec",
	"nfa_round_list",
	"nfa_rounds",
	"nfa_expr",
	"term_short",
	"action_param",
	"action_param_list",
	"opt_action_param_list",
	"opt_action_params",
	"alphabet_num",
	"inline_expr",
	"opt_whitespace",
	"lm_part_list",
	"longest_match_part",
	"opt_lm_part_action",
	"action_embed",
	"action_embed_block",
	"expression",
	"term",
	"factor_with_label",
	"factor_with_ep",
	"local_state_ref",
	"factor_with_aug",
	"aug_type_base",
	"priority_aug",
	"priority_name",
	"aug_type_cond",
	"aug_type_to_state",
	"aug_type_from_state",
	"aug_type_eof",
	"aug_type_gbl_error",
	"aug_type_local_error",
	"local_err_name",
	"factor_with_rep",
	"named_action_ref",
	"action_arg_list",
	"opt_action_arg_list",
	"priority_aug_num",
	"factor_rep_num",
	"factor_with_neg",
	"factor",
	"regular_expr_or_data",
	"regular_expr",
	"range_lit",
	"colon_cond",
	"opt_max_arg",
	"regular_expr_item",
	"regular_expr_char",
	"regular_expr_or_char",
	"inline_block_item",
	"inline_block_interpret",
	"inline_expr_any",
	"inline_block_symbol",
	"inline_expr_interpret",
	"state_ref",
	"inline_expr_item",
	"inline_expr_symbol",
	"no_name_sep",
	"state_ref_names",
	"opt_name_sep",
	"_start"
};

#line 1852 "rlparse.kl"


void Parser6::init()
{
	#line 5451 "rlparse.cc"
	curs = Parser6_startState;
	pool = 0;
	block = (struct Parser6_Block*) malloc( sizeof(struct Parser6_Block) );
	block->next = 0;
	freshEl = block->data;
	#ifdef KELBT_LOG_ACTIONS
	cerr << "allocating 8128 LangEls" << endl;
	#endif
	stackTop = freshEl;
	stackTop->type = 0;
	stackTop->state = -1;
	stackTop->next = 0;
	stackTop->child = 0;
	stackTop->causeReduce = 0;
	freshPos = 1;
	lastFinal = stackTop;
	numRetry = 0;
	numNodes = 0;
	errCount = 0;
#line 1857 "rlparse.kl"
}

int Parser6::parseLangEl( int type, const Token *token )
{
	#line 5476 "rlparse.cc"
#define reject() induceReject = 1

	int pos, targState;
	unsigned int *action;
	int rhsLen;
	struct Parser6_LangEl *rhs[32];
	struct Parser6_LangEl *lel = 0;
	struct Parser6_LangEl *input = 0;
	struct Parser6_LangEl *queue = 0;
	char induceReject;

	if ( curs < 0 )
		return 0;

	if ( pool == 0 ) {
		if ( freshPos == 8128 ) {
			struct Parser6_Block* newBlock  = (struct Parser6_Block*) malloc( sizeof(struct Parser6_Block) );
			newBlock->next = block;
			block = newBlock;
			freshEl = newBlock->data;
			#ifdef KELBT_LOG_ACTIONS
			cerr << "allocating 8128 LangEls" << endl;
			#endif
			freshPos = 0;
		}
		queue = freshEl + freshPos++;
	}
	else {
		queue = pool;
		pool = pool->next;
	}
	numNodes += 1;

	queue->type = type;
	queue->user.token = *token;
	queue->next = 0;
	queue->retry = 0;
	queue->child = 0;
	queue->causeReduce = 0;

again:
	if ( input == 0 ) {
		if ( queue == 0 )
			goto _out;

		input = queue;
		queue = queue->next;
		input->next = 0;
	}

	lel = input;
	if ( lel->type < Parser6_keys[curs<<1] || lel->type > Parser6_keys[(curs<<1)+1] )
		goto parseError;

	pos = Parser6_indicies[Parser6_offsets[curs] + (lel->type - Parser6_keys[curs<<1])];
	if ( pos < 0 )
		goto parseError;

	induceReject = 0;
	targState = Parser6_targs[pos];
	action = Parser6_actions + Parser6_actInds[pos];
	if ( lel->retry & 0x0000ffff )
		action += (lel->retry & 0x0000ffff);

	if ( *action & 0x1 ) {
		#ifdef KELBT_LOG_ACTIONS
		cerr << "shifted: " << Parser6_lelNames[lel->type];
		#endif
		input = input->next;
		lel->state = curs;
		lel->next = stackTop;
		stackTop = lel;

		if ( action[1] == 0 )
			lel->retry &= 0xffff0000;
		else {
			lel->retry += 1;
			numRetry += 1;
			#ifdef KELBT_LOG_ACTIONS
			cerr << " retry: " << stackTop;
			#endif
		}
		#ifdef KELBT_LOG_ACTIONS
		cerr << endl;
		#endif
	}

	if ( Parser6_commitLen[pos] != 0 ) {
		struct Parser6_LangEl *commitHead = stackTop, *lel;
		int sp = 0, doExec = 0;
		#ifdef KELBT_LOG_ACTIONS
		cerr << "commit encountered, executing final actions" << endl;
		#endif
		if ( Parser6_commitLen[pos] < 0 )
			commitHead = commitHead->next;

		lel = commitHead;

commit_head:
		if ( lel == lastFinal ) {
			doExec = 1;
			goto commit_base;
		}

		if ( lel->next != 0 ) {
			sp += 1;
			lel->next->prev = lel;
			lel = lel->next;
			lel->retry = 0;
			goto commit_head;
		}

commit_reverse:

		if ( lel->child != 0 ) {
			sp += 1;
			lel->child->prev = lel;
			lel = lel->child;
			lel->retry = 1;
			goto commit_head;
		}

commit_upwards:

		if ( doExec ) {
			if ( lel->type < 239 ) {
			}
			else {
				struct Parser6_LangEl *redLel = lel;
				if ( redLel->child != 0 ) {
					int r = Parser6_prodLengths[redLel->reduction] - 1;
					struct Parser6_LangEl *rhsEl = redLel->child;
					while ( rhsEl != 0 ) {
						rhs[r--] = rhsEl;
						rhsEl = rhsEl->next;
					}
				}
switch ( lel->reduction ) {
case 20: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[1]->user.token;
#line 80 "rlparse.kl"

		LengthDef *lengthDef = new LengthDef( (__ref0)->data );
		pd->lengthDefList.append( lengthDef );

		/* Generic creation of machine for instantiation and assignment. */
		MachineDef *machineDef = new MachineDef( lengthDef );
		tryMachineDef( (__ref1)->loc, (__ref2)->data, machineDef, false );
	

#line 5627 "rlparse.cc"
} break;
case 21: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 91 "rlparse.kl"

		if ( pd->fsmCtx->prePushExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			pd->id->error((__ref0)->loc) << "pre_push code already defined" << endl;
		}

		pd->fsmCtx->prePushExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5643 "rlparse.cc"
} break;
case 22: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 103 "rlparse.kl"

		if ( pd->fsmCtx->postPopExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			pd->id->error((__ref0)->loc) << "post_pop code already defined" << endl;
		}

		pd->fsmCtx->postPopExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5659 "rlparse.cc"
} break;
case 23: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 114 "rlparse.kl"

		if ( pd->fsmCtx->nfaPrePushExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			pd->id->error((__ref0)->loc) << "nfa_pre_push code already defined" << endl;
		}

		pd->fsmCtx->nfaPrePushExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5675 "rlparse.cc"
} break;
case 24: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 125 "rlparse.kl"

		if ( pd->fsmCtx->nfaPostPopExpr != 0 ) {
			/* Recover by just ignoring the duplicate. */
			pd->id->error((__ref0)->loc) << "nfa_post_pop code already defined" << endl;
		}

		pd->fsmCtx->nfaPostPopExpr = new InlineBlock( (__ref1)->loc, (__ref2)->inlineList );
	

#line 5691 "rlparse.cc"
} break;
case 25: {
#line 135 "rlparse.kl"

		exportContext.append( true );
	

#line 5699 "rlparse.cc"
} break;
case 26: {
Parser6_Lel_opt_export *__ref0 = (Parser6_Lel_opt_export*)&redLel->user.opt_export;
#line 144 "rlparse.kl"
 (__ref0)->isSet = true; 

#line 5706 "rlparse.cc"
} break;
case 27: {
Parser6_Lel_opt_export *__ref0 = (Parser6_Lel_opt_export*)&redLel->user.opt_export;
#line 145 "rlparse.kl"
 (__ref0)->isSet = false; 

#line 5713 "rlparse.cc"
} break;
case 28: {
#line 148 "rlparse.kl"

		exportContext.remove( exportContext.length()-1 );
	

#line 5721 "rlparse.cc"
} break;
case 29: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_join *__ref2 = (Parser6_Lel_join*)&rhs[3]->user.join;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref4 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_opt_export *__ref5 = (Parser6_Lel_opt_export*)&rhs[0]->user.opt_export;
Parser6_Lel_join *__ref6 = (Parser6_Lel_join*)&rhs[3]->user.join;
Token *__ref7 = (Token*)&rhs[2]->user.token;
#line 153 "rlparse.kl"

		/* Main machine must be an instance. */
		bool isInstance = false;
		if ( strcmp((__ref0)->token.data, mainMachine) == 0 ) {
			pd->id->warning((__ref1)->token.loc) << 
					"main machine will be implicitly instantiated" << endl;
			isInstance = true;
		}

		/* Generic creation of machine for instantiation and assignment. */
		MachineDef *machineDef = new MachineDef( (__ref2)->join );
		tryMachineDef( (__ref3)->token.loc, (__ref4)->token.data, machineDef, isInstance );

		if ( (__ref5)->isSet )
			exportContext.remove( exportContext.length()-1 );

		(__ref6)->join->loc = (__ref7)->loc;
	

#line 5752 "rlparse.cc"
} break;
case 30: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[1]->user.token_type;
Parser6_Lel_join_or_lm *__ref2 = (Parser6_Lel_join_or_lm*)&rhs[3]->user.join_or_lm;
Parser6_Lel_opt_export *__ref3 = (Parser6_Lel_opt_export*)&rhs[0]->user.opt_export;
Parser6_Lel_join_or_lm *__ref4 = (Parser6_Lel_join_or_lm*)&rhs[3]->user.join_or_lm;
Parser6_Lel_join_or_lm *__ref5 = (Parser6_Lel_join_or_lm*)&rhs[3]->user.join_or_lm;
Token *__ref6 = (Token*)&rhs[2]->user.token;
#line 173 "rlparse.kl"

		/* Generic creation of machine for instantiation and assignment. */
		tryMachineDef( (__ref0)->token.loc, (__ref1)->token.data, (__ref2)->machineDef, true );

		if ( (__ref3)->isSet )
			exportContext.remove( exportContext.length()-1 );

		/* Pass a location to join_or_lm */
		if ( (__ref4)->machineDef->join != 0 )
			(__ref5)->machineDef->join->loc = (__ref6)->loc;
	

#line 5775 "rlparse.cc"
} break;
case 31: {
Parser6_Lel_nfa_round_spec *__ref0 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_nfa_round_spec *__ref2 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Token *__ref4 = (Token*)&rhs[0]->user.token;
Parser6_Lel_nfa_round_spec *__ref5 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref6 = (Token*)&rhs[2]->user.token;
Parser6_Lel_nfa_round_spec *__ref7 = (Parser6_Lel_nfa_round_spec*)&redLel->user.nfa_round_spec;
Token *__ref8 = (Token*)&rhs[2]->user.token;
Token *__ref9 = (Token*)&rhs[2]->user.token;
#line 193 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		(__ref0)->depth = strtol( (__ref1)->data, 0, 10 );
		if ( (__ref2)->depth == LONG_MAX && errno == ERANGE )
			pd->id->error((__ref3)->loc) << "rounds " << (__ref4)->data << " overflows" << endl;

		(__ref5)->grouping = strtol( (__ref6)->data, 0, 10 );
		if ( (__ref7)->grouping == LONG_MAX && errno == ERANGE )
			pd->id->error((__ref8)->loc) << "grouping " << (__ref9)->data << " overflows" << endl;
	

#line 5801 "rlparse.cc"
} break;
case 32: {
Parser6_Lel_nfa_round_list *__ref0 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_list *__ref1 = (Parser6_Lel_nfa_round_list*)&rhs[0]->user.nfa_round_list;
Parser6_Lel_nfa_round_list *__ref2 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_spec *__ref3 = (Parser6_Lel_nfa_round_spec*)&rhs[2]->user.nfa_round_spec;
Parser6_Lel_nfa_round_spec *__ref4 = (Parser6_Lel_nfa_round_spec*)&rhs[2]->user.nfa_round_spec;
#line 212 "rlparse.kl"

		(__ref0)->roundsList = (__ref1)->roundsList;
		(__ref2)->roundsList->append(
				NfaRound( (__ref3)->depth, (__ref4)->grouping ) );
	

#line 5816 "rlparse.cc"
} break;
case 33: {
Parser6_Lel_nfa_round_list *__ref0 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_list *__ref1 = (Parser6_Lel_nfa_round_list*)&redLel->user.nfa_round_list;
Parser6_Lel_nfa_round_spec *__ref2 = (Parser6_Lel_nfa_round_spec*)&rhs[0]->user.nfa_round_spec;
Parser6_Lel_nfa_round_spec *__ref3 = (Parser6_Lel_nfa_round_spec*)&rhs[0]->user.nfa_round_spec;
#line 220 "rlparse.kl"

		(__ref0)->roundsList = new NfaRoundVect;
		(__ref1)->roundsList->append(
				NfaRound( (__ref2)->depth, (__ref3)->grouping ) );
	

#line 5830 "rlparse.cc"
} break;
case 34: {
Parser6_Lel_nfa_rounds *__ref0 = (Parser6_Lel_nfa_rounds*)&redLel->user.nfa_rounds;
Parser6_Lel_nfa_round_list *__ref1 = (Parser6_Lel_nfa_round_list*)&rhs[1]->user.nfa_round_list;
#line 233 "rlparse.kl"

		(__ref0)->roundsList = (__ref1)->roundsList;
	

#line 5840 "rlparse.cc"
} break;
case 35: {
Parser6_Lel_nfa_expr *__ref0 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_nfa_expr *__ref1 = (Parser6_Lel_nfa_expr*)&rhs[0]->user.nfa_expr;
Parser6_Lel_nfa_expr *__ref2 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_term_short *__ref3 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 243 "rlparse.kl"

		(__ref0)->nfaUnion = (__ref1)->nfaUnion;
		(__ref2)->nfaUnion->terms.append( (__ref3)->term );
	

#line 5853 "rlparse.cc"
} break;
case 36: {
Parser6_Lel_nfa_expr *__ref0 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_nfa_expr *__ref1 = (Parser6_Lel_nfa_expr*)&redLel->user.nfa_expr;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[0]->user.term_short;
#line 248 "rlparse.kl"

		(__ref0)->nfaUnion = new NfaUnion();
		(__ref1)->nfaUnion->terms.append( (__ref2)->term );
	

#line 5865 "rlparse.cc"
} break;
case 37: {
Parser6_Lel_nfa_expr *__ref0 = (Parser6_Lel_nfa_expr*)&rhs[3]->user.nfa_expr;
Parser6_Lel_nfa_rounds *__ref1 = (Parser6_Lel_nfa_rounds*)&rhs[2]->user.nfa_rounds;
Parser6_Lel_nfa_expr *__ref2 = (Parser6_Lel_nfa_expr*)&rhs[3]->user.nfa_expr;
Parser6_Lel_token_type *__ref3 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref4 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 254 "rlparse.kl"

		(__ref0)->nfaUnion->roundsList = (__ref1)->roundsList;
		MachineDef *machineDef = new MachineDef( (__ref2)->nfaUnion );

		/* Generic creation of machine for instantiation and assignment. */
		tryMachineDef( (__ref3)->token.loc, (__ref4)->token.data, machineDef, true );
	

#line 5882 "rlparse.cc"
} break;
case 38: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 271 "rlparse.kl"

		/* Make/get the priority key. The name may have already been referenced
		 * and therefore exist. */
		PriorDictEl *priorDictEl;
		if ( pd->priorDict.insert( (__ref0)->data, pd->fsmCtx->nextPriorKey, &priorDictEl ) )
			pd->fsmCtx->nextPriorKey += 1;
		pd->curDefPriorKey = priorDictEl->value;

		/* Make/get the local error key. */
		LocalErrDictEl *localErrDictEl;
		if ( pd->localErrDict.insert( (__ref1)->data, pd->nextLocalErrKey, &localErrDictEl ) )
			pd->nextLocalErrKey += 1;
		pd->curDefLocalErrKey = localErrDictEl->value;

		(__ref2)->token = *(__ref3);
	

#line 5907 "rlparse.cc"
} break;
case 39: {
Parser6_Lel_action_param *__ref0 = (Parser6_Lel_action_param*)&redLel->user.action_param;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 295 "rlparse.kl"

		(__ref0)->param = new ActionParam( (__ref1)->data );
	

#line 5917 "rlparse.cc"
} break;
case 40: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&rhs[0]->user.action_param_list;
Parser6_Lel_action_param_list *__ref2 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param *__ref3 = (Parser6_Lel_action_param*)&rhs[2]->user.action_param;
#line 306 "rlparse.kl"

		(__ref0)->paramList = (__ref1)->paramList;
		(__ref2)->paramList->append( (__ref3)->param );
	

#line 5930 "rlparse.cc"
} break;
case 41: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param *__ref2 = (Parser6_Lel_action_param*)&rhs[0]->user.action_param;
#line 313 "rlparse.kl"

		(__ref0)->paramList = new ActionParamList;
		(__ref1)->paramList->append( (__ref2)->param );
	

#line 5942 "rlparse.cc"
} break;
case 42: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&rhs[0]->user.action_param_list;
#line 322 "rlparse.kl"

		(__ref0)->paramList = (__ref1)->paramList;
	

#line 5952 "rlparse.cc"
} break;
case 43: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
#line 327 "rlparse.kl"

		(__ref0)->paramList = new ActionParamList;
	

#line 5961 "rlparse.cc"
} break;
case 44: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
Parser6_Lel_action_param_list *__ref1 = (Parser6_Lel_action_param_list*)&rhs[1]->user.action_param_list;
Parser6_Lel_action_param_list *__ref2 = (Parser6_Lel_action_param_list*)&rhs[1]->user.action_param_list;
#line 338 "rlparse.kl"

		(__ref0)->paramList = (__ref1)->paramList;
		paramList = (__ref2)->paramList;
	

#line 5973 "rlparse.cc"
} break;
case 45: {
Parser6_Lel_action_param_list *__ref0 = (Parser6_Lel_action_param_list*)&redLel->user.action_param_list;
#line 344 "rlparse.kl"

		(__ref0)->paramList = 0;
	

#line 5982 "rlparse.cc"
} break;
case 46: {
Token *__ref0 = (Token*)&rhs[1]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[1]->user.token;
Token *__ref3 = (Token*)&rhs[3]->user.token;
Token *__ref4 = (Token*)&rhs[1]->user.token;
Parser6_Lel_inline_list *__ref5 = (Parser6_Lel_inline_list*)&rhs[4]->user.inline_list;
Parser6_Lel_action_param_list *__ref6 = (Parser6_Lel_action_param_list*)&rhs[2]->user.action_param_list;
Parser6_Lel_action_param_list *__ref7 = (Parser6_Lel_action_param_list*)&rhs[2]->user.action_param_list;
#line 350 "rlparse.kl"

		if ( pd->actionDict.find( (__ref0)->data ) ) {
			/* Recover by just ignoring the duplicate. */
			pd->id->error((__ref1)->loc) << "action \"" << (__ref2)->data << "\" already defined" << endl;
		}
		else {
			/* Add the action to the list of actions. */
			Action *newAction = new Action( (__ref3)->loc, (__ref4)->data, 
					(__ref5)->inlineList, pd->fsmCtx->nextCondId++ );

			/* Insert to list and dict. */
			pd->fsmCtx->actionList.append( newAction );
			pd->actionDict.insert( newAction );

			newAction->paramList = (__ref6)->paramList;
			if ( (__ref7)->paramList != 0 )
				newAction->argListMap = new ActionArgListMap;
		}
		parseSubstitutions = false;
	

#line 6015 "rlparse.cc"
} break;
case 47: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[2]->user.token;
Token *__ref3 = (Token*)&rhs[1]->user.token;
Token *__ref4 = (Token*)&rhs[1]->user.token;
Token *__ref5 = (Token*)&rhs[2]->user.token;
#line 374 "rlparse.kl"

		if ( ! pd->setAlphType( (__ref0)->loc, hostLang, (__ref1)->data, (__ref2)->data ) ) {
			// Recover by ignoring the alphtype statement.
			pd->id->error((__ref3)->loc) << "\"" << (__ref4)->data << 
					" " << (__ref5)->data << "\" is not a valid alphabet type" << endl;
		}
	

#line 6033 "rlparse.cc"
} break;
case 48: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[1]->user.token;
Token *__ref3 = (Token*)&rhs[1]->user.token;
#line 383 "rlparse.kl"

		if ( ! pd->setAlphType( (__ref0)->loc, hostLang, (__ref1)->data ) ) {
			// Recover by ignoring the alphtype statement.
			pd->id->error((__ref2)->loc) << "\"" << (__ref3)->data << 
					"\" is not a valid alphabet type" << endl;
		}
	

#line 6049 "rlparse.cc"
} break;
case 49: {
Parser6_Lel_alphabet_num *__ref0 = (Parser6_Lel_alphabet_num*)&rhs[1]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref1 = (Parser6_Lel_alphabet_num*)&rhs[2]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref2 = (Parser6_Lel_alphabet_num*)&rhs[1]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref3 = (Parser6_Lel_alphabet_num*)&rhs[2]->user.alphabet_num;
#line 393 "rlparse.kl"

		// Save the upper and lower ends of the range and emit the line number.
		pd->lowerNum = (__ref0)->token.data;
		pd->upperNum = (__ref1)->token.data;
		pd->rangeLowLoc = (__ref2)->token.loc;
		pd->rangeHighLoc = (__ref3)->token.loc;
	

#line 6065 "rlparse.cc"
} break;
case 50: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
#line 402 "rlparse.kl"

		pd->fsmCtx->getKeyExpr = (__ref0)->inlineList;
	

#line 6074 "rlparse.cc"
} break;
case 51: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
#line 407 "rlparse.kl"

		pd->fsmCtx->accessExpr = (__ref0)->inlineList;
	

#line 6083 "rlparse.cc"
} break;
case 52: {
Token *__ref0 = (Token*)&rhs[2]->user.token;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[3]->user.inline_list;
Token *__ref2 = (Token*)&rhs[2]->user.token;
#line 412 "rlparse.kl"

		/* FIXME: Need to implement the rest of this. */
		bool wasSet = pd->setVariable( (__ref0)->data, (__ref1)->inlineList );
		if ( !wasSet )
			pd->id->error((__ref2)->loc) << "bad variable name" << endl;
	

#line 6097 "rlparse.cc"
} break;
case 55: {
Parser6_Lel_join_or_lm *__ref0 = (Parser6_Lel_join_or_lm*)&redLel->user.join_or_lm;
Parser6_Lel_join *__ref1 = (Parser6_Lel_join*)&rhs[0]->user.join;
#line 432 "rlparse.kl"

		(__ref0)->machineDef = new MachineDef( (__ref1)->join );
	

#line 6107 "rlparse.cc"
} break;
case 56: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_lm_part_list *__ref1 = (Parser6_Lel_lm_part_list*)&rhs[1]->user.lm_part_list;
Parser6_Lel_lm_part_list *__ref2 = (Parser6_Lel_lm_part_list*)&rhs[1]->user.lm_part_list;
Parser6_Lel_join_or_lm *__ref3 = (Parser6_Lel_join_or_lm*)&redLel->user.join_or_lm;
#line 436 "rlparse.kl"

		/* Create a new factor going to a longest match structure. Record
		 * in the parse data that we have a longest match. */
		LongestMatch *lm = new LongestMatch( (__ref0)->loc, (__ref1)->lmPartList );
		pd->lmList.append( lm );
		for ( LmPartList::Iter lmp = *((__ref2)->lmPartList); lmp.lte(); lmp++ )
			lmp->longestMatch = lm;
		(__ref3)->machineDef = new MachineDef( lm );
	

#line 6125 "rlparse.cc"
} break;
case 57: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&rhs[1]->user.longest_match_part;
Parser6_Lel_lm_part_list *__ref1 = (Parser6_Lel_lm_part_list*)&rhs[0]->user.lm_part_list;
Parser6_Lel_longest_match_part *__ref2 = (Parser6_Lel_longest_match_part*)&rhs[1]->user.longest_match_part;
Parser6_Lel_lm_part_list *__ref3 = (Parser6_Lel_lm_part_list*)&redLel->user.lm_part_list;
Parser6_Lel_lm_part_list *__ref4 = (Parser6_Lel_lm_part_list*)&rhs[0]->user.lm_part_list;
#line 453 "rlparse.kl"

		if ( (__ref0)->lmPart != 0 ) 
			(__ref1)->lmPartList->append( (__ref2)->lmPart );
		(__ref3)->lmPartList = (__ref4)->lmPartList;
	

#line 6140 "rlparse.cc"
} break;
case 58: {
Parser6_Lel_lm_part_list *__ref0 = (Parser6_Lel_lm_part_list*)&redLel->user.lm_part_list;
Parser6_Lel_longest_match_part *__ref1 = (Parser6_Lel_longest_match_part*)&rhs[0]->user.longest_match_part;
Parser6_Lel_lm_part_list *__ref2 = (Parser6_Lel_lm_part_list*)&redLel->user.lm_part_list;
Parser6_Lel_longest_match_part *__ref3 = (Parser6_Lel_longest_match_part*)&rhs[0]->user.longest_match_part;
#line 460 "rlparse.kl"

		/* Create a new list with the part. */
		(__ref0)->lmPartList = new LmPartList;
		if ( (__ref1)->lmPart != 0 )
			(__ref2)->lmPartList->append( (__ref3)->lmPart );
	

#line 6155 "rlparse.cc"
} break;
case 59: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
#line 474 "rlparse.kl"

		(__ref0)->lmPart = 0;
	

#line 6164 "rlparse.cc"
} break;
case 60: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
#line 479 "rlparse.kl"

		(__ref0)->lmPart = 0;
	

#line 6173 "rlparse.cc"
} break;
case 61: {
Parser6_Lel_longest_match_part *__ref0 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
Parser6_Lel_opt_lm_part_action *__ref1 = (Parser6_Lel_opt_lm_part_action*)&rhs[1]->user.opt_lm_part_action;
Parser6_Lel_longest_match_part *__ref2 = (Parser6_Lel_longest_match_part*)&redLel->user.longest_match_part;
Parser6_Lel_join *__ref3 = (Parser6_Lel_join*)&rhs[0]->user.join;
Token *__ref4 = (Token*)&rhs[2]->user.token;
Parser6_Lel_join *__ref5 = (Parser6_Lel_join*)&rhs[0]->user.join;
Token *__ref6 = (Token*)&rhs[2]->user.token;
#line 484 "rlparse.kl"

		(__ref0)->lmPart = 0;
		Action *action = (__ref1)->action;
		if ( action != 0 )
			action->isLmAction = true;
		(__ref2)->lmPart = new LongestMatchPart( (__ref3)->join, action, 
				(__ref4)->loc, pd->nextLongestMatchId++ );

		/* Provide a location to join. Unfortunately We don't
		 * have the start of the join as in other occurances. Use the end. */
		(__ref5)->join->loc = (__ref6)->loc;
	

#line 6197 "rlparse.cc"
} break;
case 62: {
Parser6_Lel_opt_lm_part_action *__ref0 = (Parser6_Lel_opt_lm_part_action*)&redLel->user.opt_lm_part_action;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[1]->user.action_ref;
#line 503 "rlparse.kl"
 
		(__ref0)->action = (__ref1)->action;
	

#line 6207 "rlparse.cc"
} break;
case 63: {
Parser6_Lel_opt_lm_part_action *__ref0 = (Parser6_Lel_opt_lm_part_action*)&redLel->user.opt_lm_part_action;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 507 "rlparse.kl"

		(__ref0)->action = (__ref1)->action;
	

#line 6217 "rlparse.cc"
} break;
case 64: {
Parser6_Lel_opt_lm_part_action *__ref0 = (Parser6_Lel_opt_lm_part_action*)&redLel->user.opt_lm_part_action;
#line 511 "rlparse.kl"

		(__ref0)->action = 0;
	

#line 6226 "rlparse.cc"
} break;
case 65: {
Parser6_Lel_join *__ref0 = (Parser6_Lel_join*)&rhs[0]->user.join;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[2]->user.expression;
Parser6_Lel_join *__ref2 = (Parser6_Lel_join*)&redLel->user.join;
Parser6_Lel_join *__ref3 = (Parser6_Lel_join*)&rhs[0]->user.join;
#line 522 "rlparse.kl"

		/* Append the expression to the list and return it. */
		(__ref0)->join->exprList.append( (__ref1)->expression );
		(__ref2)->join = (__ref3)->join;
	

#line 6240 "rlparse.cc"
} break;
case 66: {
Parser6_Lel_join *__ref0 = (Parser6_Lel_join*)&redLel->user.join;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
#line 528 "rlparse.kl"

		(__ref0)->join = new Join( (__ref1)->expression );
	

#line 6250 "rlparse.cc"
} break;
case 67: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 538 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::OrType );
	

#line 6262 "rlparse.cc"
} break;
case 68: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 543 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::IntersectType );
	

#line 6274 "rlparse.cc"
} break;
case 69: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 548 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::SubtractType );
	

#line 6286 "rlparse.cc"
} break;
case 70: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_expression *__ref1 = (Parser6_Lel_expression*)&rhs[0]->user.expression;
Parser6_Lel_term_short *__ref2 = (Parser6_Lel_term_short*)&rhs[2]->user.term_short;
#line 553 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->expression, 
				(__ref2)->term, Expression::StrongSubtractType );
	

#line 6298 "rlparse.cc"
} break;
case 71: {
Parser6_Lel_expression *__ref0 = (Parser6_Lel_expression*)&redLel->user.expression;
Parser6_Lel_term_short *__ref1 = (Parser6_Lel_term_short*)&rhs[0]->user.term_short;
#line 558 "rlparse.kl"

		(__ref0)->expression = new Expression( (__ref1)->term );
	

#line 6308 "rlparse.cc"
} break;
case 72: {
Parser6_Lel_term_short *__ref0 = (Parser6_Lel_term_short*)&redLel->user.term_short;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
#line 579 "rlparse.kl"

		(__ref0)->term = (__ref1)->term;
	

#line 6318 "rlparse.cc"
} break;
case 73: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[1]->user.factor_with_label;
#line 589 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug );
	

#line 6329 "rlparse.cc"
} break;
case 74: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 593 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug );
	

#line 6340 "rlparse.cc"
} break;
case 75: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 597 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug, Term::RightStartType );
	

#line 6351 "rlparse.cc"
} break;
case 76: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 601 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, (__ref2)->factorWithAug, Term::RightFinishType );
	

#line 6362 "rlparse.cc"
} break;
case 77: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_term *__ref1 = (Parser6_Lel_term*)&rhs[0]->user.term;
Parser6_Lel_factor_with_label *__ref2 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 605 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->term, 
				(__ref2)->factorWithAug, Term::LeftType );
	

#line 6374 "rlparse.cc"
} break;
case 78: {
Parser6_Lel_term *__ref0 = (Parser6_Lel_term*)&redLel->user.term;
Parser6_Lel_factor_with_label *__ref1 = (Parser6_Lel_factor_with_label*)&rhs[0]->user.factor_with_label;
#line 610 "rlparse.kl"

		(__ref0)->term = new Term( (__ref1)->factorWithAug );
	

#line 6384 "rlparse.cc"
} break;
case 79: {
Parser6_Lel_factor_with_label *__ref0 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_label *__ref3 = (Parser6_Lel_factor_with_label*)&redLel->user.factor_with_label;
Parser6_Lel_factor_with_label *__ref4 = (Parser6_Lel_factor_with_label*)&rhs[2]->user.factor_with_label;
#line 620 "rlparse.kl"
 
		/* Add the label to the list and pass the factor up. */
		(__ref0)->factorWithAug->labels.prepend( Label((__ref1)->loc, (__ref2)->data) );
		(__ref3)->factorWithAug = (__ref4)->factorWithAug; 
	

#line 6399 "rlparse.cc"
} break;
case 80: {
Parser6_Lel_factor_with_label *__ref0 = (Parser6_Lel_factor_with_label*)&redLel->user.factor_with_label;
Parser6_Lel_factor_with_ep *__ref1 = (Parser6_Lel_factor_with_ep*)&rhs[0]->user.factor_with_ep;
#line 626 "rlparse.kl"

		(__ref0)->factorWithAug = (__ref1)->factorWithAug;
	

#line 6409 "rlparse.cc"
} break;
case 81: {
Parser6_Lel_factor_with_ep *__ref0 = (Parser6_Lel_factor_with_ep*)&rhs[0]->user.factor_with_ep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_ep *__ref2 = (Parser6_Lel_factor_with_ep*)&redLel->user.factor_with_ep;
Parser6_Lel_factor_with_ep *__ref3 = (Parser6_Lel_factor_with_ep*)&rhs[0]->user.factor_with_ep;
#line 636 "rlparse.kl"
 
		/* Add the target to the list and return the factor object. */
		(__ref0)->factorWithAug->epsilonLinks.append( EpsilonLink( (__ref1)->loc, new NameRef(nameRef) ) );
		(__ref2)->factorWithAug = (__ref3)->factorWithAug; 
	

#line 6423 "rlparse.cc"
} break;
case 82: {
Parser6_Lel_factor_with_ep *__ref0 = (Parser6_Lel_factor_with_ep*)&redLel->user.factor_with_ep;
Parser6_Lel_factor_with_aug *__ref1 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 642 "rlparse.kl"

		(__ref0)->factorWithAug = (__ref1)->factorWithAug;
	

#line 6433 "rlparse.cc"
} break;
case 83: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 652 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( 
				ParserAction( (__ref1)->loc, (__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6451 "rlparse.cc"
} break;
case 84: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_priority_aug *__ref2 = (Parser6_Lel_priority_aug*)&rhs[2]->user.priority_aug;
Parser6_Lel_factor_with_aug *__ref3 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 660 "rlparse.kl"

		/* Append the named priority to the factorWithAug and pass it up. */
		(__ref0)->factorWithAug->priorityAugs.append( 
				PriorityAug( (__ref1)->augType, pd->curDefPriorKey, (__ref2)->priorityNum ) );
		(__ref3)->factorWithAug = (__ref4)->factorWithAug;
	

#line 6467 "rlparse.cc"
} break;
case 85: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_priority_name *__ref2 = (Parser6_Lel_priority_name*)&rhs[3]->user.priority_name;
Parser6_Lel_priority_aug *__ref3 = (Parser6_Lel_priority_aug*)&rhs[5]->user.priority_aug;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 667 "rlparse.kl"

		/* Append the priority using a default name. */
		(__ref0)->factorWithAug->priorityAugs.append( 
				PriorityAug( (__ref1)->augType, (__ref2)->priorityName, (__ref3)->priorityNum ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6484 "rlparse.cc"
} break;
case 86: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 674 "rlparse.kl"

		(__ref0)->factorWithAug->conditions.append( ConditionTest( (__ref1)->loc, 
				(__ref2)->augType, (__ref3)->action, true ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6500 "rlparse.cc"
} break;
case 87: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[3]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 680 "rlparse.kl"

		(__ref0)->factorWithAug->conditions.append( ConditionTest( (__ref1)->loc, 
				(__ref2)->augType, (__ref3)->action, false ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6516 "rlparse.cc"
} break;
case 88: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 686 "rlparse.kl"

		/* Append the action, pass it up. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc, 
				(__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6533 "rlparse.cc"
} break;
case 89: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 693 "rlparse.kl"

		/* Append the action, pass it up. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6550 "rlparse.cc"
} break;
case 90: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 700 "rlparse.kl"

		/* Append the action, pass it up. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, 0, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6567 "rlparse.cc"
} break;
case 91: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 707 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, pd->curDefLocalErrKey, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6585 "rlparse.cc"
} break;
case 92: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref4 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 715 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from 
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc, 
				(__ref2)->augType, pd->curDefLocalErrKey, (__ref3)->action ) );
		(__ref4)->factorWithAug = (__ref5)->factorWithAug;
	

#line 6603 "rlparse.cc"
} break;
case 93: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
Parser6_Lel_aug_type *__ref1 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&rhs[1]->user.aug_type;
Parser6_Lel_local_err_name *__ref3 = (Parser6_Lel_local_err_name*)&rhs[3]->user.local_err_name;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_factor_with_aug *__ref5 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_aug *__ref6 = (Parser6_Lel_factor_with_aug*)&rhs[0]->user.factor_with_aug;
#line 723 "rlparse.kl"

		/* Append the action to the factorWithAug, record the refernce from
		 * factorWithAug to the action and pass up the factorWithAug. */
		(__ref0)->factorWithAug->actions.append( ParserAction( (__ref1)->loc,
				(__ref2)->augType, (__ref3)->error_name, (__ref4)->action ) );
		(__ref5)->factorWithAug = (__ref6)->factorWithAug;
	

#line 6622 "rlparse.cc"
} break;
case 94: {
Parser6_Lel_factor_with_aug *__ref0 = (Parser6_Lel_factor_with_aug*)&redLel->user.factor_with_aug;
Parser6_Lel_factor_with_rep *__ref1 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 731 "rlparse.kl"

		(__ref0)->factorWithAug = new FactorWithAug( (__ref1)->factorWithRep );
	

#line 6632 "rlparse.cc"
} break;
case 95: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 744 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_finish; 

#line 6641 "rlparse.cc"
} break;
case 96: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 745 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6650 "rlparse.cc"
} break;
case 97: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 746 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6659 "rlparse.cc"
} break;
case 98: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 747 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6668 "rlparse.cc"
} break;
case 99: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 752 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6677 "rlparse.cc"
} break;
case 100: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 753 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6686 "rlparse.cc"
} break;
case 101: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 754 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6695 "rlparse.cc"
} break;
case 102: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 755 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6704 "rlparse.cc"
} break;
case 103: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 756 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6713 "rlparse.cc"
} break;
case 104: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 757 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6722 "rlparse.cc"
} break;
case 105: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 758 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all; 

#line 6731 "rlparse.cc"
} break;
case 106: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 759 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start; 

#line 6740 "rlparse.cc"
} break;
case 107: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 760 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_leave; 

#line 6749 "rlparse.cc"
} break;
case 108: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 769 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_to_state; 

#line 6758 "rlparse.cc"
} break;
case 109: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 771 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_to_state; 

#line 6767 "rlparse.cc"
} break;
case 110: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 774 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_to_state; 

#line 6776 "rlparse.cc"
} break;
case 111: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 776 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_to_state; 

#line 6785 "rlparse.cc"
} break;
case 112: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 779 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_to_state; 

#line 6794 "rlparse.cc"
} break;
case 113: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 781 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_to_state; 

#line 6803 "rlparse.cc"
} break;
case 114: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 784 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_to_state; 

#line 6812 "rlparse.cc"
} break;
case 115: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 786 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_to_state; 

#line 6821 "rlparse.cc"
} break;
case 116: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 789 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_to_state; 

#line 6830 "rlparse.cc"
} break;
case 117: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 791 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_to_state; 

#line 6839 "rlparse.cc"
} break;
case 118: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 794 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_to_state; 

#line 6848 "rlparse.cc"
} break;
case 119: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 796 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_to_state; 

#line 6857 "rlparse.cc"
} break;
case 120: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 805 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_from_state; 

#line 6866 "rlparse.cc"
} break;
case 121: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 807 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_from_state; 

#line 6875 "rlparse.cc"
} break;
case 122: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 810 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_from_state; 

#line 6884 "rlparse.cc"
} break;
case 123: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 812 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_from_state; 

#line 6893 "rlparse.cc"
} break;
case 124: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 815 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_from_state; 

#line 6902 "rlparse.cc"
} break;
case 125: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 817 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_from_state; 

#line 6911 "rlparse.cc"
} break;
case 126: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 820 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_from_state; 

#line 6920 "rlparse.cc"
} break;
case 127: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 822 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_from_state; 

#line 6929 "rlparse.cc"
} break;
case 128: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 825 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_from_state; 

#line 6938 "rlparse.cc"
} break;
case 129: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 827 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_from_state; 

#line 6947 "rlparse.cc"
} break;
case 130: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 830 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_from_state; 

#line 6956 "rlparse.cc"
} break;
case 131: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 832 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_from_state; 

#line 6965 "rlparse.cc"
} break;
case 132: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 841 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_eof; 

#line 6974 "rlparse.cc"
} break;
case 133: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 843 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_eof; 

#line 6983 "rlparse.cc"
} break;
case 134: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 846 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_eof; 

#line 6992 "rlparse.cc"
} break;
case 135: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 848 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_eof; 

#line 7001 "rlparse.cc"
} break;
case 136: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 851 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_eof; 

#line 7010 "rlparse.cc"
} break;
case 137: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 853 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_eof; 

#line 7019 "rlparse.cc"
} break;
case 138: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 856 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_eof; 

#line 7028 "rlparse.cc"
} break;
case 139: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 858 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_eof; 

#line 7037 "rlparse.cc"
} break;
case 140: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 861 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_eof; 

#line 7046 "rlparse.cc"
} break;
case 141: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 863 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_eof; 

#line 7055 "rlparse.cc"
} break;
case 142: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 866 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_eof; 

#line 7064 "rlparse.cc"
} break;
case 143: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 868 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_eof; 

#line 7073 "rlparse.cc"
} break;
case 144: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 877 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_gbl_error; 

#line 7082 "rlparse.cc"
} break;
case 145: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 879 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_gbl_error; 

#line 7091 "rlparse.cc"
} break;
case 146: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 882 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_gbl_error; 

#line 7100 "rlparse.cc"
} break;
case 147: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 884 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_gbl_error; 

#line 7109 "rlparse.cc"
} break;
case 148: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 887 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_gbl_error; 

#line 7118 "rlparse.cc"
} break;
case 149: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 889 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_gbl_error; 

#line 7127 "rlparse.cc"
} break;
case 150: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 892 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_gbl_error; 

#line 7136 "rlparse.cc"
} break;
case 151: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 894 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_gbl_error; 

#line 7145 "rlparse.cc"
} break;
case 152: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 897 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_gbl_error; 

#line 7154 "rlparse.cc"
} break;
case 153: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 899 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_gbl_error; 

#line 7163 "rlparse.cc"
} break;
case 154: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 902 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_gbl_error; 

#line 7172 "rlparse.cc"
} break;
case 155: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 904 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_gbl_error; 

#line 7181 "rlparse.cc"
} break;
case 156: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 914 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_local_error; 

#line 7190 "rlparse.cc"
} break;
case 157: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 916 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_start_local_error; 

#line 7199 "rlparse.cc"
} break;
case 158: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 919 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_local_error; 

#line 7208 "rlparse.cc"
} break;
case 159: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 921 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_start_local_error; 

#line 7217 "rlparse.cc"
} break;
case 160: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 924 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_local_error; 

#line 7226 "rlparse.cc"
} break;
case 161: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 926 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_all_local_error; 

#line 7235 "rlparse.cc"
} break;
case 162: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 929 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_local_error; 

#line 7244 "rlparse.cc"
} break;
case 163: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 931 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_final_local_error; 

#line 7253 "rlparse.cc"
} break;
case 164: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 934 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_local_error; 

#line 7262 "rlparse.cc"
} break;
case 165: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 936 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_not_final_local_error; 

#line 7271 "rlparse.cc"
} break;
case 166: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 939 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_local_error; 

#line 7280 "rlparse.cc"
} break;
case 167: {
Parser6_Lel_aug_type *__ref0 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_aug_type *__ref2 = (Parser6_Lel_aug_type*)&redLel->user.aug_type;
#line 941 "rlparse.kl"
 (__ref0)->loc = (__ref1)->loc; (__ref2)->augType = at_middle_local_error; 

#line 7289 "rlparse.cc"
} break;
case 168: {
Parser6_Lel_action_ref *__ref0 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 954 "rlparse.kl"
 (__ref0)->action = (__ref1)->action; 

#line 7297 "rlparse.cc"
} break;
case 169: {
Parser6_Lel_action_ref *__ref0 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[1]->user.action_ref;
#line 955 "rlparse.kl"
 (__ref0)->action = (__ref1)->action; 

#line 7305 "rlparse.cc"
} break;
case 170: {
Parser6_Lel_action_ref *__ref0 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 956 "rlparse.kl"
 (__ref0)->action = (__ref1)->action; 

#line 7313 "rlparse.cc"
} break;
case 171: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref1 = (Parser6_Lel_action_arg_list*)&rhs[0]->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref2 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[2]->user.action_ref;
#line 965 "rlparse.kl"

		(__ref0)->argList = (__ref1)->argList;
		(__ref2)->argList->append( (__ref3)->action );
	

#line 7326 "rlparse.cc"
} break;
case 172: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref1 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_ref *__ref2 = (Parser6_Lel_action_ref*)&rhs[0]->user.action_ref;
#line 971 "rlparse.kl"

		(__ref0)->argList = new ActionArgList;
		(__ref1)->argList->append( (__ref2)->action );
	

#line 7338 "rlparse.cc"
} break;
case 173: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref1 = (Parser6_Lel_action_arg_list*)&rhs[0]->user.action_arg_list;
#line 981 "rlparse.kl"

		(__ref0)->argList = (__ref1)->argList;
	

#line 7348 "rlparse.cc"
} break;
case 174: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&redLel->user.action_arg_list;
#line 985 "rlparse.kl"

		(__ref0)->argList = new ActionArgList;
	

#line 7357 "rlparse.cc"
} break;
case 176: {
Parser6_Lel_action_arg_list *__ref0 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_arg_list *__ref5 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Token *__ref6 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref7 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_arg_list *__ref8 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_ref *__ref9 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Parser6_Lel_action_arg_list *__ref10 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_arg_list *__ref11 = (Parser6_Lel_action_arg_list*)&rhs[2]->user.action_arg_list;
Parser6_Lel_action_ref *__ref12 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 1032 "rlparse.kl"

		/* Make sure the number of actions line up. */
		if ( (__ref0)->argList->length() != (__ref1)->action->paramList->length() ) {
			pd->id->error((__ref2)->loc) << "wrong number of action "
				"arguments for \"" << (__ref3)->data << "\"" << endl;
		}
				
		/* Now we need to specialize using the supplied args. We can only
		 * present an Action* to fsmcodegen. */
		ActionArgListMapEl *el = (__ref4)->action->argListMap->find( (__ref5)->argList );
		if ( el == 0 ) {
			/* Allocate an action representing this specialization. */
			Action *specAction = Action::cons( (__ref6)->loc, (__ref7)->action,
					(__ref8)->argList, pd->fsmCtx->nextCondId++ );
			pd->fsmCtx->actionList.append( specAction );

			el = (__ref9)->action->argListMap->insert( (__ref10)->argList, specAction );
		}
		else {
			/* Can delete $3->arg list. */
			delete (__ref11)->argList;
		}

		(__ref12)->action = el->value;
	

#line 7400 "rlparse.cc"
} break;
case 177: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
Parser6_Lel_action_ref *__ref2 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 1061 "rlparse.kl"

		/* Create the action, add it to the list and pass up. */
		Action *newAction = new Action( (__ref0)->loc, std::string(),
				(__ref1)->inlineList, pd->fsmCtx->nextCondId++ );
		pd->fsmCtx->actionList.append( newAction );
		(__ref2)->action = newAction;
	

#line 7415 "rlparse.cc"
} break;
case 178: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_priority_name *__ref1 = (Parser6_Lel_priority_name*)&redLel->user.priority_name;
#line 1077 "rlparse.kl"

		// Lookup/create the priority key.
		PriorDictEl *priorDictEl;
		if ( pd->priorDict.insert( (__ref0)->data, pd->fsmCtx->nextPriorKey, &priorDictEl ) )
			pd->fsmCtx->nextPriorKey += 1;

		// Use the inserted/found priority key.
		(__ref1)->priorityName = priorDictEl->value;
	

#line 7431 "rlparse.cc"
} break;
case 179: {
Parser6_Lel_priority_aug_num *__ref0 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref1 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref2 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref3 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref4 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref5 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref6 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref7 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref8 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug *__ref9 = (Parser6_Lel_priority_aug*)&redLel->user.priority_aug;
Parser6_Lel_priority_aug_num *__ref10 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug *__ref11 = (Parser6_Lel_priority_aug*)&redLel->user.priority_aug;
Parser6_Lel_priority_aug *__ref12 = (Parser6_Lel_priority_aug*)&redLel->user.priority_aug;
Parser6_Lel_priority_aug_num *__ref13 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref14 = (Parser6_Lel_priority_aug_num*)&rhs[0]->user.priority_aug_num;
#line 1094 "rlparse.kl"

		char *data = (__ref0)->token.data;
		if ( (__ref1)->pos || (__ref2)->neg ) {
			data = new char[(__ref3)->token.length + 2];
			data[0] = (__ref4)->pos ? '+' : '-';
			memcpy( data + 1, (__ref5)->token.data, (__ref6)->token.length );
			data[(__ref7)->token.length + 1] = 0;
		}

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		long aug = strtol( data, 0, 10 );
		if ( errno == ERANGE && aug == LONG_MAX ) {
			/* Priority number too large. Recover by setting the priority to 0. */
			pd->id->error((__ref8)->token.loc) << "priority number " << data << 
					" overflows" << endl;
			(__ref9)->priorityNum = 0;
		}
		else if ( errno == ERANGE && aug == LONG_MIN ) {
			/* Priority number too large in the neg. Recover by using 0. */
			pd->id->error((__ref10)->token.loc) << "priority number " << data << 
					" underflows" << endl;
			(__ref11)->priorityNum = 0;
		}
		else {
			/* No overflow or underflow. */
			(__ref12)->priorityNum = aug;
		}

		if ( (__ref13)->pos || (__ref14)->neg )
			delete[] data;
	

#line 7483 "rlparse.cc"
} break;
case 180: {
Parser6_Lel_priority_aug_num *__ref0 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref1 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref2 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1136 "rlparse.kl"

		(__ref0)->pos = false;
		(__ref1)->neg = false;
		(__ref2)->token = *(__ref3);
	

#line 7497 "rlparse.cc"
} break;
case 181: {
Parser6_Lel_priority_aug_num *__ref0 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref1 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref2 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Token *__ref3 = (Token*)&rhs[1]->user.token;
Token *__ref4 = (Token*)&rhs[1]->user.token;
Token *__ref5 = (Token*)&rhs[0]->user.token;
#line 1142 "rlparse.kl"

		(__ref0)->pos = true;
		(__ref1)->neg = false;
		(__ref2)->token.set( (__ref3)->data, (__ref4)->length, (__ref5)->loc );
	

#line 7513 "rlparse.cc"
} break;
case 182: {
Parser6_Lel_priority_aug_num *__ref0 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref1 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Parser6_Lel_priority_aug_num *__ref2 = (Parser6_Lel_priority_aug_num*)&redLel->user.priority_aug_num;
Token *__ref3 = (Token*)&rhs[1]->user.token;
Token *__ref4 = (Token*)&rhs[1]->user.token;
Token *__ref5 = (Token*)&rhs[0]->user.token;
#line 1148 "rlparse.kl"

		(__ref0)->pos = false;
		(__ref1)->neg = true;
		(__ref2)->token.set( (__ref3)->data, (__ref4)->length, (__ref5)->loc );
	

#line 7529 "rlparse.cc"
} break;
case 183: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_local_err_name *__ref1 = (Parser6_Lel_local_err_name*)&redLel->user.local_err_name;
#line 1160 "rlparse.kl"

		/* Lookup/create the priority key. */
		LocalErrDictEl *localErrDictEl;
		if ( pd->localErrDict.insert( (__ref0)->data, pd->nextLocalErrKey, &localErrDictEl ) )
			pd->nextLocalErrKey += 1;

		/* Use the inserted/found priority key. */
		(__ref1)->error_name = localErrDictEl->value;
	

#line 7545 "rlparse.cc"
} break;
case 184: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1181 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::StarType );
	

#line 7557 "rlparse.cc"
} break;
case 185: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1186 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::StarStarType );
	

#line 7569 "rlparse.cc"
} break;
case 186: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1191 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::OptionalType );
	

#line 7581 "rlparse.cc"
} break;
case 187: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
#line 1196 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, 0, FactorWithRep::PlusType );
	

#line 7593 "rlparse.cc"
} break;
case 188: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[2]->user.factor_rep_num;
#line 1201 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				(__ref3)->rep, 0, FactorWithRep::ExactType );
	

#line 7606 "rlparse.cc"
} break;
case 189: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[3]->user.factor_rep_num;
#line 1206 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				0, (__ref3)->rep, FactorWithRep::MaxType );
	

#line 7619 "rlparse.cc"
} break;
case 190: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[2]->user.factor_rep_num;
#line 1211 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep,
				(__ref3)->rep, 0, FactorWithRep::MinType );
	

#line 7632 "rlparse.cc"
} break;
case 191: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Parser6_Lel_factor_with_rep *__ref2 = (Parser6_Lel_factor_with_rep*)&rhs[0]->user.factor_with_rep;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&rhs[2]->user.factor_rep_num;
Parser6_Lel_factor_rep_num *__ref4 = (Parser6_Lel_factor_rep_num*)&rhs[4]->user.factor_rep_num;
#line 1216 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->loc, (__ref2)->factorWithRep, 
				(__ref3)->rep, (__ref4)->rep, FactorWithRep::RangeType );
	

#line 7646 "rlparse.cc"
} break;
case 192: {
Parser6_Lel_factor_with_rep *__ref0 = (Parser6_Lel_factor_with_rep*)&redLel->user.factor_with_rep;
Parser6_Lel_factor_with_neg *__ref1 = (Parser6_Lel_factor_with_neg*)&rhs[0]->user.factor_with_neg;
#line 1221 "rlparse.kl"

		(__ref0)->factorWithRep = new FactorWithRep( (__ref1)->factorWithNeg );
	

#line 7656 "rlparse.cc"
} break;
case 193: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_rep_num *__ref3 = (Parser6_Lel_factor_rep_num*)&redLel->user.factor_rep_num;
Parser6_Lel_factor_rep_num *__ref4 = (Parser6_Lel_factor_rep_num*)&redLel->user.factor_rep_num;
#line 1231 "rlparse.kl"

		// Convert the priority number to a long. Check for overflow.
		errno = 0;
		long rep = strtol( (__ref0)->data, 0, 10 );
		if ( errno == ERANGE && rep == LONG_MAX ) {
			// Repetition too large. Recover by returing repetition 1. */
			pd->id->error((__ref1)->loc) << "repetition number " << (__ref2)->data << " overflows" << endl;
			(__ref3)->rep = 1;
		}
		else {
			// Cannot be negative, so no overflow.
			(__ref4)->rep = rep;
 		}
	

#line 7680 "rlparse.cc"
} break;
case 194: {
Parser6_Lel_factor_with_neg *__ref0 = (Parser6_Lel_factor_with_neg*)&redLel->user.factor_with_neg;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_neg *__ref2 = (Parser6_Lel_factor_with_neg*)&rhs[1]->user.factor_with_neg;
#line 1257 "rlparse.kl"

		(__ref0)->factorWithNeg = new FactorWithNeg( (__ref1)->loc,
				(__ref2)->factorWithNeg, FactorWithNeg::NegateType );
	

#line 7692 "rlparse.cc"
} break;
case 195: {
Parser6_Lel_factor_with_neg *__ref0 = (Parser6_Lel_factor_with_neg*)&redLel->user.factor_with_neg;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor_with_neg *__ref2 = (Parser6_Lel_factor_with_neg*)&rhs[1]->user.factor_with_neg;
#line 1262 "rlparse.kl"

		(__ref0)->factorWithNeg = new FactorWithNeg( (__ref1)->loc,
				(__ref2)->factorWithNeg, FactorWithNeg::CharNegateType );
	

#line 7704 "rlparse.cc"
} break;
case 196: {
Parser6_Lel_factor_with_neg *__ref0 = (Parser6_Lel_factor_with_neg*)&redLel->user.factor_with_neg;
Parser6_Lel_factor *__ref1 = (Parser6_Lel_factor*)&rhs[0]->user.factor;
#line 1267 "rlparse.kl"

		(__ref0)->factorWithNeg = new FactorWithNeg( (__ref1)->factor );
	

#line 7714 "rlparse.cc"
} break;
case 197: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1277 "rlparse.kl"

		/* Create a new factor node going to a concat literal. */
		(__ref0)->factor = new Factor( new Literal( (__ref1)->loc, false, (__ref2)->data,
				(__ref3)->length, Literal::LitString ) );
	

#line 7728 "rlparse.cc"
} break;
case 198: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_alphabet_num *__ref1 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref2 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref3 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref4 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
#line 1283 "rlparse.kl"

		/* Create a new factor node going to a literal number. */
		(__ref0)->factor = new Factor( new Literal( (__ref1)->token.loc, (__ref2)->neg,
				(__ref3)->token.data, (__ref4)->token.length, Literal::Number ) );
	

#line 7743 "rlparse.cc"
} break;
case 199: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor *__ref3 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref4 = (Token*)&rhs[0]->user.token;
Parser6_Lel_factor *__ref5 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_factor *__ref6 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref7 = (Token*)&rhs[0]->user.token;
#line 1289 "rlparse.kl"

		/* Find the named graph. */
		GraphDictEl *gdNode = pd->graphDict.find( (__ref0)->data );
		if ( gdNode == 0 ) {
			/* Recover by returning null as the factor node. */
			pd->id->error((__ref1)->loc) << "graph lookup of \"" << (__ref2)->data << "\" failed" << endl;
			(__ref3)->factor = 0;
		}
		else if ( gdNode->isInstance ) {
			/* Recover by retuning null as the factor node. */
			pd->id->error((__ref4)->loc) << "references to graph instantiations not allowed "
					"in expressions" << endl;
			(__ref5)->factor = 0;
		}
		else {
			/* Create a factor node that is a lookup of an expression. */
			(__ref6)->factor = new Factor( (__ref7)->loc, gdNode->value );
		}
	

#line 7775 "rlparse.cc"
} break;
case 200: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1309 "rlparse.kl"

		/* Create a new factor node going to an OR expression. */
		(__ref0)->factor = new Factor( new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::OrBlock ) );
	

#line 7787 "rlparse.cc"
} break;
case 201: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1314 "rlparse.kl"

		/* Create a new factor node going to a negated OR expression. */
		(__ref0)->factor = new Factor( new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::NegOrBlock ) );
	

#line 7799 "rlparse.cc"
} break;
case 202: {
Token *__ref0 = (Token*)&rhs[2]->user.token;
Token *__ref1 = (Token*)&rhs[2]->user.token;
Token *__ref2 = (Token*)&rhs[2]->user.token;
Parser6_Lel_regular_expr *__ref3 = (Parser6_Lel_regular_expr*)&rhs[1]->user.regular_expr;
Parser6_Lel_factor *__ref4 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_regular_expr *__ref5 = (Parser6_Lel_regular_expr*)&rhs[1]->user.regular_expr;
#line 1319 "rlparse.kl"

		bool caseInsensitive = false;
		checkLitOptions( pd->id, (__ref0)->loc, (__ref1)->data, (__ref2)->length, caseInsensitive );
		if ( caseInsensitive )
			(__ref3)->regExpr->caseInsensitive = true;

		/* Create a new factor node going to a regular exp. */
		(__ref4)->factor = new Factor( (__ref5)->regExpr );
	

#line 7819 "rlparse.cc"
} break;
case 203: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_range_lit *__ref1 = (Parser6_Lel_range_lit*)&rhs[0]->user.range_lit;
Parser6_Lel_range_lit *__ref2 = (Parser6_Lel_range_lit*)&rhs[2]->user.range_lit;
#line 1329 "rlparse.kl"

		/* Create a new factor node going to a range. */
		(__ref0)->factor = new Factor( new Range( (__ref1)->literal, (__ref2)->literal, false ) );
	

#line 7831 "rlparse.cc"
} break;
case 204: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_range_lit *__ref1 = (Parser6_Lel_range_lit*)&rhs[0]->user.range_lit;
Parser6_Lel_range_lit *__ref2 = (Parser6_Lel_range_lit*)&rhs[2]->user.range_lit;
#line 1334 "rlparse.kl"

		/* Create a new factor node going to a range. */
		(__ref0)->factor = new Factor( new Range( (__ref1)->literal, (__ref2)->literal, true ) );
	

#line 7843 "rlparse.cc"
} break;
case 205: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_expression *__ref2 = (Parser6_Lel_expression*)&rhs[1]->user.expression;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[3]->user.action_ref;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_action_ref *__ref5 = (Parser6_Lel_action_ref*)&rhs[7]->user.action_ref;
Parser6_Lel_action_ref *__ref6 = (Parser6_Lel_action_ref*)&rhs[9]->user.action_ref;
Parser6_Lel_action_ref *__ref7 = (Parser6_Lel_action_ref*)&rhs[11]->user.action_ref;
Parser6_Lel_action_ref *__ref8 = (Parser6_Lel_action_ref*)&rhs[13]->user.action_ref;
#line 1342 "rlparse.kl"

		/* push, pop, ini, stay, repeat, exit */
		(__ref0)->factor = new Factor( (__ref1)->loc, pd->nextRepId++, (__ref2)->expression,
				(__ref3)->action, (__ref4)->action, (__ref5)->action, (__ref6)->action, (__ref7)->action, (__ref8)->action,
				Factor::NfaRep );
	

#line 7863 "rlparse.cc"
} break;
case 206: {
Parser6_Lel_colon_cond *__ref0 = (Parser6_Lel_colon_cond*)&redLel->user.colon_cond;
Parser6_Lel_colon_cond *__ref1 = (Parser6_Lel_colon_cond*)&redLel->user.colon_cond;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1358 "rlparse.kl"

		(__ref0)->type = Factor::CondStar;
		(__ref1)->loc = (__ref2)->loc;
	

#line 7875 "rlparse.cc"
} break;
case 207: {
Parser6_Lel_colon_cond *__ref0 = (Parser6_Lel_colon_cond*)&redLel->user.colon_cond;
Parser6_Lel_colon_cond *__ref1 = (Parser6_Lel_colon_cond*)&redLel->user.colon_cond;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1364 "rlparse.kl"

		(__ref0)->type = Factor::CondStar;
		(__ref1)->loc = (__ref2)->loc;
	

#line 7887 "rlparse.cc"
} break;
case 208: {
Parser6_Lel_colon_cond *__ref0 = (Parser6_Lel_colon_cond*)&redLel->user.colon_cond;
Parser6_Lel_colon_cond *__ref1 = (Parser6_Lel_colon_cond*)&redLel->user.colon_cond;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1370 "rlparse.kl"

		(__ref0)->type = Factor::CondPlus;
		(__ref1)->loc = (__ref2)->loc;
	

#line 7899 "rlparse.cc"
} break;
case 209: {
Parser6_Lel_opt_max_arg *__ref0 = (Parser6_Lel_opt_max_arg*)&redLel->user.opt_max_arg;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&rhs[1]->user.action_ref;
#line 1383 "rlparse.kl"

		(__ref0)->action = (__ref1)->action;

	

#line 7910 "rlparse.cc"
} break;
case 210: {
Parser6_Lel_opt_max_arg *__ref0 = (Parser6_Lel_opt_max_arg*)&redLel->user.opt_max_arg;
#line 1389 "rlparse.kl"

		(__ref0)->action = 0;
	

#line 7919 "rlparse.cc"
} break;
case 211: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_colon_cond *__ref1 = (Parser6_Lel_colon_cond*)&rhs[0]->user.colon_cond;
Parser6_Lel_expression *__ref2 = (Parser6_Lel_expression*)&rhs[1]->user.expression;
Parser6_Lel_action_ref *__ref3 = (Parser6_Lel_action_ref*)&rhs[3]->user.action_ref;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&rhs[5]->user.action_ref;
Parser6_Lel_action_ref *__ref5 = (Parser6_Lel_action_ref*)&rhs[7]->user.action_ref;
Parser6_Lel_opt_max_arg *__ref6 = (Parser6_Lel_opt_max_arg*)&rhs[8]->user.opt_max_arg;
Parser6_Lel_colon_cond *__ref7 = (Parser6_Lel_colon_cond*)&rhs[0]->user.colon_cond;
#line 1396 "rlparse.kl"

		/* ini, inc, min, max */
		(__ref0)->factor = new Factor( (__ref1)->loc, pd->nextRepId++, (__ref2)->expression,
				(__ref3)->action, (__ref4)->action, (__ref5)->action, (__ref6)->action, 0, 0,
				(__ref7)->type );
	

#line 7938 "rlparse.cc"
} break;
case 212: {
Parser6_Lel_factor *__ref0 = (Parser6_Lel_factor*)&redLel->user.factor;
Parser6_Lel_join *__ref1 = (Parser6_Lel_join*)&rhs[1]->user.join;
Parser6_Lel_join *__ref2 = (Parser6_Lel_join*)&rhs[1]->user.join;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1403 "rlparse.kl"

		/* Create a new factor going to a parenthesized join. */
		(__ref0)->factor = new Factor( (__ref1)->join );
		(__ref2)->join->loc = (__ref3)->loc;
	

#line 7952 "rlparse.cc"
} break;
case 213: {
Parser6_Lel_range_lit *__ref0 = (Parser6_Lel_range_lit*)&redLel->user.range_lit;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1416 "rlparse.kl"

		/* Range literas must have only one char. We restrict this in the parse tree. */
		(__ref0)->literal = new Literal( (__ref1)->loc, false, (__ref2)->data,
				(__ref3)->length, Literal::LitString );
	

#line 7966 "rlparse.cc"
} break;
case 214: {
Parser6_Lel_range_lit *__ref0 = (Parser6_Lel_range_lit*)&redLel->user.range_lit;
Parser6_Lel_alphabet_num *__ref1 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref2 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref3 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref4 = (Parser6_Lel_alphabet_num*)&rhs[0]->user.alphabet_num;
#line 1422 "rlparse.kl"

		/* Create a new literal number. */
		(__ref0)->literal = new Literal( (__ref1)->token.loc, (__ref2)->neg,
				(__ref3)->token.data, (__ref4)->token.length, Literal::Number );
	

#line 7981 "rlparse.cc"
} break;
case 215: {
Parser6_Lel_alphabet_num *__ref0 = (Parser6_Lel_alphabet_num*)&redLel->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref1 = (Parser6_Lel_alphabet_num*)&redLel->user.alphabet_num;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1436 "rlparse.kl"
 
		(__ref0)->neg = false;
		(__ref1)->token = *(__ref2);
	

#line 7993 "rlparse.cc"
} break;
case 216: {
Parser6_Lel_alphabet_num *__ref0 = (Parser6_Lel_alphabet_num*)&redLel->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref1 = (Parser6_Lel_alphabet_num*)&redLel->user.alphabet_num;
Token *__ref2 = (Token*)&rhs[1]->user.token;
Token *__ref3 = (Token*)&rhs[1]->user.token;
Token *__ref4 = (Token*)&rhs[0]->user.token;
#line 1441 "rlparse.kl"
 
		(__ref0)->neg = true;
		(__ref1)->token.set( (__ref2)->data, (__ref3)->length, (__ref4)->loc );
	

#line 8007 "rlparse.cc"
} break;
case 217: {
Parser6_Lel_alphabet_num *__ref0 = (Parser6_Lel_alphabet_num*)&redLel->user.alphabet_num;
Parser6_Lel_alphabet_num *__ref1 = (Parser6_Lel_alphabet_num*)&redLel->user.alphabet_num;
Token *__ref2 = (Token*)&rhs[0]->user.token;
#line 1446 "rlparse.kl"
 
		(__ref0)->neg = false;
		(__ref1)->token = *(__ref2);
	

#line 8019 "rlparse.cc"
} break;
case 218: {
Parser6_Lel_regular_expr_item *__ref0 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr_item *__ref1 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr *__ref2 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref3 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref4 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref5 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr_item *__ref6 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr_item *__ref7 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
Parser6_Lel_regular_expr *__ref8 = (Parser6_Lel_regular_expr*)&redLel->user.regular_expr;
Parser6_Lel_regular_expr *__ref9 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr *__ref10 = (Parser6_Lel_regular_expr*)&redLel->user.regular_expr;
Parser6_Lel_regular_expr *__ref11 = (Parser6_Lel_regular_expr*)&rhs[0]->user.regular_expr;
Parser6_Lel_regular_expr_item *__ref12 = (Parser6_Lel_regular_expr_item*)&rhs[1]->user.regular_expr_item;
#line 1462 "rlparse.kl"

		/* An optimization to lessen the tree size. If a non-starred char is
		 * directly under the left side on the right and the right side is
		 * another non-starred char then paste them together and return the
		 * left side. Otherwise just put the two under a new reg exp node. */
		if ( (__ref0)->reItem->type == ReItem::Data && !(__ref1)->reItem->star &&
			(__ref2)->regExpr->type == RegExpr::RecurseItem &&
			(__ref3)->regExpr->item->type == ReItem::Data && !(__ref4)->regExpr->item->star )
		{
			/* Append the right side to the right side of the left and toss the
			 * right side. */
			(__ref5)->regExpr->item->data.append( (__ref6)->reItem->data );
			delete (__ref7)->reItem;
			(__ref8)->regExpr = (__ref9)->regExpr;
		}
		else {
			(__ref10)->regExpr = new RegExpr( (__ref11)->regExpr, (__ref12)->reItem );
		}
	

#line 8056 "rlparse.cc"
} break;
case 219: {
Parser6_Lel_regular_expr *__ref0 = (Parser6_Lel_regular_expr*)&redLel->user.regular_expr;
#line 1482 "rlparse.kl"

		/* Can't optimize the tree. */
		(__ref0)->regExpr = new RegExpr();
	

#line 8066 "rlparse.cc"
} break;
case 220: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&rhs[0]->user.regular_expr_char;
Parser6_Lel_regular_expr_item *__ref1 = (Parser6_Lel_regular_expr_item*)&redLel->user.regular_expr_item;
Parser6_Lel_regular_expr_char *__ref2 = (Parser6_Lel_regular_expr_char*)&rhs[0]->user.regular_expr_char;
#line 1494 "rlparse.kl"

		(__ref0)->reItem->star = true;
		(__ref1)->reItem = (__ref2)->reItem;
	

#line 8078 "rlparse.cc"
} break;
case 221: {
Parser6_Lel_regular_expr_item *__ref0 = (Parser6_Lel_regular_expr_item*)&redLel->user.regular_expr_item;
Parser6_Lel_regular_expr_char *__ref1 = (Parser6_Lel_regular_expr_char*)&rhs[0]->user.regular_expr_char;
#line 1499 "rlparse.kl"

		(__ref0)->reItem = (__ref1)->reItem;
	

#line 8088 "rlparse.cc"
} break;
case 222: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1511 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::OrBlock );
	

#line 8099 "rlparse.cc"
} break;
case 223: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[1]->user.regular_expr_or_data;
#line 1515 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, (__ref2)->reOrBlock, ReItem::NegOrBlock );
	

#line 8110 "rlparse.cc"
} break;
case 224: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1519 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, ReItem::Dot );
	

#line 8120 "rlparse.cc"
} break;
case 225: {
Parser6_Lel_regular_expr_char *__ref0 = (Parser6_Lel_regular_expr_char*)&redLel->user.regular_expr_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1523 "rlparse.kl"

		(__ref0)->reItem = new ReItem( (__ref1)->loc, (__ref2)->data, (__ref3)->length );
	

#line 8132 "rlparse.cc"
} break;
case 226: {
Parser6_Lel_regular_expr_or_char *__ref0 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
Parser6_Lel_regular_expr_or_data *__ref1 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref2 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref3 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_char *__ref4 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
Parser6_Lel_regular_expr_or_char *__ref5 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
Parser6_Lel_regular_expr_or_data *__ref6 = (Parser6_Lel_regular_expr_or_data*)&redLel->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref7 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref8 = (Parser6_Lel_regular_expr_or_data*)&redLel->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_data *__ref9 = (Parser6_Lel_regular_expr_or_data*)&rhs[0]->user.regular_expr_or_data;
Parser6_Lel_regular_expr_or_char *__ref10 = (Parser6_Lel_regular_expr_or_char*)&rhs[1]->user.regular_expr_or_char;
#line 1535 "rlparse.kl"

		/* An optimization to lessen the tree size. If an or char is directly
		 * under the left side on the right and the right side is another or
		 * char then paste them together and return the left side. Otherwise
		 * just put the two under a new or data node. */
		if ( (__ref0)->reOrItem->type == ReOrItem::Data &&
				(__ref1)->reOrBlock->type == ReOrBlock::RecurseItem &&
				(__ref2)->reOrBlock->item->type == ReOrItem::Data )
		{
			/* Append the right side to right side of the left and toss the
			 * right side. */
			(__ref3)->reOrBlock->item->data.append( (__ref4)->reOrItem->data );
			delete (__ref5)->reOrItem;
			(__ref6)->reOrBlock = (__ref7)->reOrBlock;
		}
		else {
			/* Can't optimize, put the left and right under a new node. */
			(__ref8)->reOrBlock = new ReOrBlock( (__ref9)->reOrBlock, (__ref10)->reOrItem );
		}
	

#line 8168 "rlparse.cc"
} break;
case 227: {
Parser6_Lel_regular_expr_or_data *__ref0 = (Parser6_Lel_regular_expr_or_data*)&redLel->user.regular_expr_or_data;
#line 1556 "rlparse.kl"

		(__ref0)->reOrBlock = new ReOrBlock();
	

#line 8177 "rlparse.cc"
} break;
case 228: {
Parser6_Lel_regular_expr_or_char *__ref0 = (Parser6_Lel_regular_expr_or_char*)&redLel->user.regular_expr_or_char;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
#line 1568 "rlparse.kl"

		(__ref0)->reOrItem = new ReOrItem( (__ref1)->loc, (__ref2)->data, (__ref3)->length );
	

#line 8189 "rlparse.cc"
} break;
case 229: {
Parser6_Lel_regular_expr_or_char *__ref0 = (Parser6_Lel_regular_expr_or_char*)&redLel->user.regular_expr_or_char;
Token *__ref1 = (Token*)&rhs[1]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[2]->user.token;
#line 1572 "rlparse.kl"

		(__ref0)->reOrItem = new ReOrItem( (__ref1)->loc, (__ref2)->data[0], (__ref3)->data[0] );
	

#line 8201 "rlparse.cc"
} break;
case 230: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[0]->user.inline_list;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_item *__ref3 = (Parser6_Lel_inline_item*)&rhs[1]->user.inline_item;
#line 1589 "rlparse.kl"

		/* Append the item to the list, return the list. */
		(__ref0)->inlineList = (__ref1)->inlineList;
		(__ref2)->inlineList->append( (__ref3)->inlineItem );
	

#line 8215 "rlparse.cc"
} break;
case 231: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
#line 1596 "rlparse.kl"

		/* Start with empty list. */
		(__ref0)->inlineList = new InlineList;
	

#line 8225 "rlparse.cc"
} break;
case 232: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1611 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8236 "rlparse.cc"
} break;
case 233: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1617 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8247 "rlparse.cc"
} break;
case 234: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_item *__ref1 = (Parser6_Lel_inline_item*)&rhs[0]->user.inline_item;
#line 1623 "rlparse.kl"

		/* Pass the inline item up. */
		(__ref0)->inlineItem = (__ref1)->inlineItem;
	

#line 8258 "rlparse.cc"
} break;
case 235: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1630 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8266 "rlparse.cc"
} break;
case 236: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1631 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8274 "rlparse.cc"
} break;
case 237: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1632 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8282 "rlparse.cc"
} break;
case 238: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1633 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8290 "rlparse.cc"
} break;
case 239: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1634 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8298 "rlparse.cc"
} break;
case 240: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1635 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8306 "rlparse.cc"
} break;
case 241: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_item *__ref1 = (Parser6_Lel_inline_item*)&rhs[0]->user.inline_item;
#line 1639 "rlparse.kl"

		/* Pass up interpreted items of inline expressions. */
		(__ref0)->inlineItem = (__ref1)->inlineItem;
	

#line 8317 "rlparse.cc"
} break;
case 242: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1644 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Hold );
	

#line 8327 "rlparse.cc"
} break;
case 243: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[1]->user.inline_list;
#line 1648 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Exec );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8340 "rlparse.cc"
} break;
case 244: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1653 "rlparse.kl"
 
		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, 
				new NameRef(nameRef), InlineItem::Goto );
	

#line 8351 "rlparse.cc"
} break;
case 245: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1658 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::GotoExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8364 "rlparse.cc"
} break;
case 246: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1663 "rlparse.kl"
 
		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, new NameRef(nameRef), InlineItem::Next );
	

#line 8374 "rlparse.cc"
} break;
case 247: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1667 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::NextExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8387 "rlparse.cc"
} break;
case 248: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1672 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, new NameRef(nameRef), InlineItem::Call );
	

#line 8397 "rlparse.cc"
} break;
case 249: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1676 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::CallExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8410 "rlparse.cc"
} break;
case 250: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1681 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Ret );
	

#line 8420 "rlparse.cc"
} break;
case 251: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1685 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Break );
	

#line 8430 "rlparse.cc"
} break;
case 252: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1689 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, new NameRef(nameRef),
				InlineItem::Ncall );
	

#line 8441 "rlparse.cc"
} break;
case 253: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref2 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_list *__ref3 = (Parser6_Lel_inline_list*)&rhs[2]->user.inline_list;
#line 1694 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::NcallExpr );
		(__ref2)->inlineItem->children = (__ref3)->inlineList;
	

#line 8454 "rlparse.cc"
} break;
case 254: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1699 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Nret );
	

#line 8464 "rlparse.cc"
} break;
case 255: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1703 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Nbreak );
	

#line 8474 "rlparse.cc"
} break;
case 256: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Token *__ref4 = (Token*)&rhs[0]->user.token;
Parser6_Lel_inline_item *__ref5 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
#line 1707 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Subst );

		ActionParamList::Iter api = *paramList;
		for ( ; api.lte(); api++ ) {
			if ( (*api)->name == (__ref2)->data )
				break;
		}

		if ( api.end() )
			pd->id->error( (__ref3)->loc ) << "invalid parameter reference \"$" << (__ref4)->data << "\"" << endl;
		else {
			(__ref5)->inlineItem->substPos = api.pos();
		}
	

#line 8500 "rlparse.cc"
} break;
case 257: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_list *__ref1 = (Parser6_Lel_inline_list*)&rhs[0]->user.inline_list;
Parser6_Lel_inline_list *__ref2 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
Parser6_Lel_inline_item *__ref3 = (Parser6_Lel_inline_item*)&rhs[1]->user.inline_item;
#line 1728 "rlparse.kl"

		(__ref0)->inlineList = (__ref1)->inlineList;
		(__ref2)->inlineList->append( (__ref3)->inlineItem );
	

#line 8513 "rlparse.cc"
} break;
case 258: {
Parser6_Lel_inline_list *__ref0 = (Parser6_Lel_inline_list*)&redLel->user.inline_list;
#line 1733 "rlparse.kl"

		/* Init the list used for this expr. */
		(__ref0)->inlineList = new InlineList;
	

#line 8523 "rlparse.cc"
} break;
case 259: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1742 "rlparse.kl"

		/* Return a text segment. */
		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8535 "rlparse.cc"
} break;
case 260: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_token_type *__ref1 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
Parser6_Lel_token_type *__ref2 = (Parser6_Lel_token_type*)&rhs[0]->user.token_type;
#line 1748 "rlparse.kl"

		/* Return a text segment, must heap alloc the text. */
		(__ref0)->inlineItem = new InlineItem( (__ref1)->token.loc, (__ref2)->token.data, InlineItem::Text );
	

#line 8547 "rlparse.cc"
} break;
case 261: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Parser6_Lel_inline_item *__ref1 = (Parser6_Lel_inline_item*)&rhs[0]->user.inline_item;
#line 1754 "rlparse.kl"

		/* Pass the inline item up. */
		(__ref0)->inlineItem = (__ref1)->inlineItem;
	

#line 8558 "rlparse.cc"
} break;
case 274: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1784 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::PChar );
	

#line 8568 "rlparse.cc"
} break;
case 275: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1789 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Char );
	

#line 8578 "rlparse.cc"
} break;
case 276: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1794 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Curs );
	

#line 8588 "rlparse.cc"
} break;
case 277: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1799 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, InlineItem::Targs );
	

#line 8598 "rlparse.cc"
} break;
case 278: {
Parser6_Lel_inline_item *__ref0 = (Parser6_Lel_inline_item*)&redLel->user.inline_item;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1804 "rlparse.kl"

		(__ref0)->inlineItem = new InlineItem( (__ref1)->loc, 
			new NameRef(nameRef), InlineItem::Entry );
	

#line 8609 "rlparse.cc"
} break;
case 280: {
#line 1815 "rlparse.kl"

		nameRef.empty();
	

#line 8617 "rlparse.cc"
} break;
case 282: {
#line 1825 "rlparse.kl"

		/* Insert an initial null pointer val to indicate the existence of the
		 * initial name seperator. */
		nameRef.setAs( 0 );
	

#line 8627 "rlparse.cc"
} break;
case 283: {
#line 1831 "rlparse.kl"

		nameRef.empty();
	

#line 8635 "rlparse.cc"
} break;
case 284: {
Token *__ref0 = (Token*)&rhs[2]->user.token;
#line 1838 "rlparse.kl"

		nameRef.append( (__ref0)->data );
	

#line 8644 "rlparse.cc"
} break;
case 285: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
#line 1843 "rlparse.kl"

		nameRef.append( (__ref0)->data );
	

#line 8653 "rlparse.cc"
} break;
}
			}

			if ( lel->child != 0 ) {
				struct Parser6_LangEl *first = lel->child;
				struct Parser6_LangEl *child = lel->child;
				lel->child = 0;
				while ( 1 ) {
					if ( child->type < 239 ) {
					}
					else {
					}
					numNodes -= 1;
					if ( child->next == 0 )
						break;
					child = child->next;
				}
				child->next = pool;
				pool = first;
			}
		}

commit_base:
		if ( sp > 0 ) {
			sp -= 1;
			if ( lel->retry == 0 ) {
				lel = lel->prev;
				goto commit_reverse;
			}
			else {
				lel->retry = 0;
				lel = lel->prev;
				goto commit_upwards;
			}
		}
		lel->retry = 0;

		lastFinal = lel;
		numRetry = 0;
	}

	if ( *action & 0x2 ) {
		int reduction = *action >> 2;
		struct Parser6_LangEl *redLel;

		if ( input != 0 )
			input->causeReduce += 1;

	if ( pool == 0 ) {
		if ( freshPos == 8128 ) {
			struct Parser6_Block* newBlock  = (struct Parser6_Block*) malloc( sizeof(struct Parser6_Block) );
			newBlock->next = block;
			block = newBlock;
			freshEl = newBlock->data;
			#ifdef KELBT_LOG_ACTIONS
			cerr << "allocating 8128 LangEls" << endl;
			#endif
			freshPos = 0;
		}
		redLel = freshEl + freshPos++;
	}
	else {
		redLel = pool;
		pool = pool->next;
	}
	numNodes += 1;

		redLel->type = Parser6_prodLhsIds[reduction];
		redLel->reduction = reduction;
		redLel->child = 0;
		redLel->next = 0;
		redLel->retry = (lel->retry << 16);
		redLel->causeReduce = 0;
		lel->retry &= 0xffff0000;

		rhsLen = Parser6_prodLengths[reduction];
		if ( rhsLen > 0 ) {
			int r;
			for ( r = rhsLen-1; r > 0; r-- ) {
				rhs[r] = stackTop;
				stackTop = stackTop->next;
			}
			rhs[0] = stackTop;
			stackTop = stackTop->next;
			rhs[0]->next = 0;
		}
switch ( reduction ) {
case 44: {
#line 335 "rlparse.kl"

		parseSubstitutions = true;
	

#line 8748 "rlparse.cc"
} break;
case 175: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 993 "rlparse.kl"

		/* Set the name in the actionDict. */
		Action *action = pd->actionDict.find( (__ref0)->data );
		if ( action != 0 ) {
			/* Pass up the action element */
			(__ref1)->action = action;
			if ( action->paramList != 0 )
				reject();
		}
		else {
			/* Will recover by returning null as the action. */
			pd->id->error((__ref2)->loc) << "action lookup of \"" << (__ref3)->data << "\" failed" << endl;
			(__ref4)->action = 0;
		}
	

#line 8773 "rlparse.cc"
} break;
case 176: {
Token *__ref0 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref1 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
Token *__ref2 = (Token*)&rhs[0]->user.token;
Token *__ref3 = (Token*)&rhs[0]->user.token;
Parser6_Lel_action_ref *__ref4 = (Parser6_Lel_action_ref*)&redLel->user.action_ref;
#line 1010 "rlparse.kl"

		/* Set the name in the actionDict. */
		Action *action = pd->actionDict.find( (__ref0)->data );
		if ( action != 0 ) {

			if ( action->paramList == 0 )
				reject();

			/*
			 * Store the action we resolved. In the final action we will
			 * convert this to the specialized action. Can't do this here since
			 * it is a try action and we have not processed the args list (all
			 * done by final actions ).
			 */
			(__ref1)->action = action;
		}
		else {
			/* Will recover by returning null as the action. */
			pd->id->error((__ref2)->loc) << "action lookup of \"" << (__ref3)->data << "\" failed" << endl;
			(__ref4)->action = 0;
		}
	

#line 8805 "rlparse.cc"
} break;
case 262: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1761 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8813 "rlparse.cc"
} break;
case 263: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1762 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8821 "rlparse.cc"
} break;
case 264: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1763 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8829 "rlparse.cc"
} break;
case 265: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1764 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8837 "rlparse.cc"
} break;
case 266: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1765 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8845 "rlparse.cc"
} break;
case 267: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1766 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8853 "rlparse.cc"
} break;
case 268: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1767 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8861 "rlparse.cc"
} break;
case 269: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1774 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8869 "rlparse.cc"
} break;
case 270: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1775 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8877 "rlparse.cc"
} break;
case 271: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1776 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8885 "rlparse.cc"
} break;
case 272: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1777 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8893 "rlparse.cc"
} break;
case 273: {
Parser6_Lel_token_type *__ref0 = (Parser6_Lel_token_type*)&redLel->user.token_type;
Token *__ref1 = (Token*)&rhs[0]->user.token;
#line 1778 "rlparse.kl"
 (__ref0)->token = *(__ref1); 

#line 8901 "rlparse.cc"
} break;
}
		#ifdef KELBT_LOG_ACTIONS
		cerr << "reduced: "
				<< Parser6_prodNames[reduction]
				<< " rhsLen: " << rhsLen;
		#endif
		if ( action[1] == 0 )
			redLel->retry = 0;
		else {
			redLel->retry += 0x10000;
			numRetry += 1;
			#ifdef KELBT_LOG_ACTIONS
			cerr << " retry: " << redLel;
			#endif
		}

		#ifdef KELBT_LOG_ACTIONS
		cerr << endl;
		#endif

		if ( rhsLen == 0 ) {
			redLel->file = lel->file;
			redLel->line = lel->line;
			targState = curs;
		}
		else {
			redLel->child = rhs[rhsLen-1];
			redLel->file = rhs[0]->file;
			redLel->line = rhs[0]->line;
			targState = rhs[0]->state;
		}

		if ( induceReject ) {
			#ifdef KELBT_LOG_ACTIONS
			cerr << "error induced during reduction of " <<
					Parser6_lelNames[redLel->type] << endl;
			#endif
			redLel->state = curs;
			redLel->next = stackTop;
			stackTop = redLel;
			curs = targState;
			goto parseError;
		}
		else {
			redLel->next = input;
			input = redLel;
		}
	}


	curs = targState;
	goto again;

parseError:
	#ifdef KELBT_LOG_BACKTRACK
	cerr << "hit error" << endl;
	#endif
	if ( numRetry > 0 ) {
		struct Parser6_LangEl *redLel;

		if ( input != 0 ) {
			redLel = input;
			goto have_undo_element;
		}

		while ( 1 ) {
			redLel = stackTop;
			if ( stackTop->type < 239 ) {
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "backing up over terminal: " <<
						Parser6_lelNames[stackTop->type] << endl;
				#endif
				stackTop = stackTop->next;
				redLel->next = input;
				input = redLel;
			}
			else {
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "backing up over non-terminal: " <<
						Parser6_lelNames[stackTop->type] << endl;
				#endif
				stackTop = stackTop->next;
				struct Parser6_LangEl *first = redLel->child;
				if ( first == 0 )
					rhsLen = 0;
				else {
					rhsLen = 1;
					while ( first->next != 0 ) {
						first = first->next;
						rhsLen += 1;
					}
					first->next = stackTop;
					stackTop = redLel->child;

					struct Parser6_LangEl *rhsEl = stackTop;
					int p = rhsLen;
					while ( p > 0 ) {
						rhs[--p] = rhsEl;
						rhsEl = rhsEl->next;
					}
				}
				redLel->next = pool;
				pool = redLel;
				numNodes -= 1;

				if ( input != 0 )
					input->causeReduce -= 1;
			}

have_undo_element:
			if ( redLel->retry == 0 ) {
				if ( input != 0 && input->causeReduce == 0 ) {
					#ifdef KELBT_LOG_BACKTRACK
					cerr << "pushing back: " << Parser6_lelNames[input->type] << endl;
					#endif
					input->next = queue;
					queue = input;
					input = 0;
				}
			}
			else {
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "found retry targ: " << redLel << endl;
				#endif
				numRetry -= 1;
				#ifdef KELBT_LOG_BACKTRACK
				cerr << "found retry: " << redLel << endl;
				#endif
				if ( redLel->retry & 0x0000ffff )
					curs = input->state;
				else {
					input->retry = redLel->retry >> 16;
					if ( stackTop->state < 0 )
						curs = Parser6_startState;
					else {
						curs = Parser6_targs[(int)Parser6_indicies[Parser6_offsets[stackTop->state] + (stackTop->type - Parser6_keys[stackTop->state<<1])]];
					}
				}
				goto again;
			}
		}
	}
	curs = -1;
	errCount += 1;
_out: {}
#line 1862 "rlparse.kl"
	return errCount == 0 ? 0 : -1;
}

void Parser6::clear()
{
	while ( block != 0 ) {
		Parser6_Block *next = block->next;
		free( block );
		block = next;
	}

	clearTokdata( this );
}

void Parser6::tryMachineDef( const InputLoc &loc, char *name, 
		MachineDef *machineDef, bool isInstance )
{
	GraphDictEl *newEl = pd->graphDict.insert( name );
	if ( newEl != 0 ) {
		/* New element in the dict, all good. */
		newEl->value = new VarDef( name, machineDef );
		newEl->isInstance = isInstance;
		newEl->loc = loc;
		newEl->value->isExport = exportContext[exportContext.length()-1];

		/* It it is an instance, put on the instance list. */
		if ( isInstance )
			pd->instanceList.append( newEl );
	}
	else {
		// Recover by ignoring the duplicate.
		pd->id->error(loc) << "fsm \"" << name << "\" previously defined" << endl;
	}
}

ostream &Parser6::parse_error( int tokId, Token &token )
{
	ostream &err = pd->id->error( token.loc );

	err << "at token ";
	if ( tokId < 128 )
		err << "\"" << Parser6_lelNames[tokId] << "\"";
	else 
		err << Parser6_lelNames[tokId];
	if ( token.data != 0 )
		err << " with data \"" << token.data << "\"";
	err << ": ";
	
	return err;
}

int Parser6::token( InputLoc &loc, int tokId, char *tokstart, int toklen )
{
	Token token;
	token.data = tokstart;
	token.length = toklen;
	token.loc.fileName = loc.fileName;
	token.loc.line = loc.line;
	token.loc.col = loc.col;
	int res = parseLangEl( tokId, &token );
	if ( res < 0 ) {
		parse_error(tokId, token) << "parse error" << endl;
		pd->id->abortCompile( 1 );
	}
	return res;
}

/* Send eof to all parsers. */
void Parser6::terminateParser()
{
	/* FIXME: a proper token is needed here. Suppose we should use the
	 * location of EOF in the last file that the parser was referenced in. */
	InputLoc loc;
	loc.fileName = "<EOF>";
	loc.line = 0;
	loc.col = 0;

	token( loc, Parser6_tk_eof, 0, 0 );
}


